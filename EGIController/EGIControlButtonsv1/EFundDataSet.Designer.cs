//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace EGIControlButtonsv1 {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("EFundDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class EFundDataSet : global::System.Data.DataSet {
        
        private StrategyParametersPerformanceDataTable tableStrategyParametersPerformance;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public EFundDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected EFundDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["StrategyParametersPerformance"] != null)) {
                    base.Tables.Add(new StrategyParametersPerformanceDataTable(ds.Tables["StrategyParametersPerformance"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public StrategyParametersPerformanceDataTable StrategyParametersPerformance {
            get {
                return this.tableStrategyParametersPerformance;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public override global::System.Data.DataSet Clone() {
            EFundDataSet cln = ((EFundDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["StrategyParametersPerformance"] != null)) {
                    base.Tables.Add(new StrategyParametersPerformanceDataTable(ds.Tables["StrategyParametersPerformance"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal void InitVars(bool initTable) {
            this.tableStrategyParametersPerformance = ((StrategyParametersPerformanceDataTable)(base.Tables["StrategyParametersPerformance"]));
            if ((initTable == true)) {
                if ((this.tableStrategyParametersPerformance != null)) {
                    this.tableStrategyParametersPerformance.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitClass() {
            this.DataSetName = "EFundDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/EFundDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableStrategyParametersPerformance = new StrategyParametersPerformanceDataTable();
            base.Tables.Add(this.tableStrategyParametersPerformance);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeStrategyParametersPerformance() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            EFundDataSet ds = new EFundDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void StrategyParametersPerformanceRowChangeEventHandler(object sender, StrategyParametersPerformanceRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class StrategyParametersPerformanceDataTable : global::System.Data.TypedTableBase<StrategyParametersPerformanceRow> {
            
            private global::System.Data.DataColumn columnInstrument;
            
            private global::System.Data.DataColumn columnPerformance;
            
            private global::System.Data.DataColumn columnPeriod;
            
            private global::System.Data.DataColumn column_OB;
            
            private global::System.Data.DataColumn column_OS;
            
            private global::System.Data.DataColumn column_OscLength;
            
            private global::System.Data.DataColumn column_TrendLength;
            
            private global::System.Data.DataColumn columnMarketOrders;
            
            private global::System.Data.DataColumn columnReverse;
            
            private global::System.Data.DataColumn columnStopLongTicks;
            
            private global::System.Data.DataColumn columnStopShortTicks;
            
            private global::System.Data.DataColumn columnTargetLongTicks;
            
            private global::System.Data.DataColumn columnTargetShortTicks;
            
            private global::System.Data.DataColumn columnTimeBegin;
            
            private global::System.Data.DataColumn columnTimeEnd;
            
            private global::System.Data.DataColumn columnTotal_Net_Profit;
            
            private global::System.Data.DataColumn columnGross_Profit;
            
            private global::System.Data.DataColumn columnGross_Loss;
            
            private global::System.Data.DataColumn columnProfit_Factor;
            
            private global::System.Data.DataColumn columnCumulative_Profit;
            
            private global::System.Data.DataColumn columnMax_Drawdown;
            
            private global::System.Data.DataColumn columnSharpe_Ratio;
            
            private global::System.Data.DataColumn columnCommission;
            
            private global::System.Data.DataColumn _columnTotal___of_Trades;
            
            private global::System.Data.DataColumn columnPercent_Profitable;
            
            private global::System.Data.DataColumn _column__of_Winning_Trades;
            
            private global::System.Data.DataColumn _column__of_Losing_Trades;
            
            private global::System.Data.DataColumn columnAverage_Trade;
            
            private global::System.Data.DataColumn columnAverage_Winning_Trade;
            
            private global::System.Data.DataColumn columnAverage_Losing_Trade;
            
            private global::System.Data.DataColumn columnRatio_avg__Win___avg__Loss;
            
            private global::System.Data.DataColumn columnMax__conseq__Winners;
            
            private global::System.Data.DataColumn columnMax__conseq__Losers;
            
            private global::System.Data.DataColumn columnLargest_Winning_Trade;
            
            private global::System.Data.DataColumn columnLargest_Losing_Trade;
            
            private global::System.Data.DataColumn _column__of_Trades_per_Day;
            
            private global::System.Data.DataColumn columnAvg__Time_in_Market;
            
            private global::System.Data.DataColumn columnProfit_per_Month;
            
            private global::System.Data.DataColumn columnMax__Time_to_Recover;
            
            private global::System.Data.DataColumn columnAverage_MAE;
            
            private global::System.Data.DataColumn columnAverage_MFE;
            
            private global::System.Data.DataColumn columnAverage_ETD;
            
            private global::System.Data.DataColumn columnCreateDate;
            
            private global::System.Data.DataColumn columnModifyDate;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public StrategyParametersPerformanceDataTable() {
                this.TableName = "StrategyParametersPerformance";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal StrategyParametersPerformanceDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected StrategyParametersPerformanceDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn InstrumentColumn {
                get {
                    return this.columnInstrument;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn PerformanceColumn {
                get {
                    return this.columnPerformance;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn PeriodColumn {
                get {
                    return this.columnPeriod;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn _OBColumn {
                get {
                    return this.column_OB;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn _OSColumn {
                get {
                    return this.column_OS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn _OscLengthColumn {
                get {
                    return this.column_OscLength;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn _TrendLengthColumn {
                get {
                    return this.column_TrendLength;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn MarketOrdersColumn {
                get {
                    return this.columnMarketOrders;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ReverseColumn {
                get {
                    return this.columnReverse;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn StopLongTicksColumn {
                get {
                    return this.columnStopLongTicks;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn StopShortTicksColumn {
                get {
                    return this.columnStopShortTicks;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TargetLongTicksColumn {
                get {
                    return this.columnTargetLongTicks;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TargetShortTicksColumn {
                get {
                    return this.columnTargetShortTicks;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TimeBeginColumn {
                get {
                    return this.columnTimeBegin;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TimeEndColumn {
                get {
                    return this.columnTimeEnd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn Total_Net_ProfitColumn {
                get {
                    return this.columnTotal_Net_Profit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn Gross_ProfitColumn {
                get {
                    return this.columnGross_Profit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn Gross_LossColumn {
                get {
                    return this.columnGross_Loss;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn Profit_FactorColumn {
                get {
                    return this.columnProfit_Factor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn Cumulative_ProfitColumn {
                get {
                    return this.columnCumulative_Profit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn Max_DrawdownColumn {
                get {
                    return this.columnMax_Drawdown;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn Sharpe_RatioColumn {
                get {
                    return this.columnSharpe_Ratio;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn CommissionColumn {
                get {
                    return this.columnCommission;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn _Total___of_TradesColumn {
                get {
                    return this._columnTotal___of_Trades;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn Percent_ProfitableColumn {
                get {
                    return this.columnPercent_Profitable;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ___of_Winning_TradesColumn {
                get {
                    return this._column__of_Winning_Trades;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ___of_Losing_TradesColumn {
                get {
                    return this._column__of_Losing_Trades;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn Average_TradeColumn {
                get {
                    return this.columnAverage_Trade;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn Average_Winning_TradeColumn {
                get {
                    return this.columnAverage_Winning_Trade;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn Average_Losing_TradeColumn {
                get {
                    return this.columnAverage_Losing_Trade;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn Ratio_avg__Win___avg__LossColumn {
                get {
                    return this.columnRatio_avg__Win___avg__Loss;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn Max__conseq__WinnersColumn {
                get {
                    return this.columnMax__conseq__Winners;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn Max__conseq__LosersColumn {
                get {
                    return this.columnMax__conseq__Losers;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn Largest_Winning_TradeColumn {
                get {
                    return this.columnLargest_Winning_Trade;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn Largest_Losing_TradeColumn {
                get {
                    return this.columnLargest_Losing_Trade;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ___of_Trades_per_DayColumn {
                get {
                    return this._column__of_Trades_per_Day;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn Avg__Time_in_MarketColumn {
                get {
                    return this.columnAvg__Time_in_Market;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn Profit_per_MonthColumn {
                get {
                    return this.columnProfit_per_Month;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn Max__Time_to_RecoverColumn {
                get {
                    return this.columnMax__Time_to_Recover;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn Average_MAEColumn {
                get {
                    return this.columnAverage_MAE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn Average_MFEColumn {
                get {
                    return this.columnAverage_MFE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn Average_ETDColumn {
                get {
                    return this.columnAverage_ETD;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn CreateDateColumn {
                get {
                    return this.columnCreateDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ModifyDateColumn {
                get {
                    return this.columnModifyDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public StrategyParametersPerformanceRow this[int index] {
                get {
                    return ((StrategyParametersPerformanceRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event StrategyParametersPerformanceRowChangeEventHandler StrategyParametersPerformanceRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event StrategyParametersPerformanceRowChangeEventHandler StrategyParametersPerformanceRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event StrategyParametersPerformanceRowChangeEventHandler StrategyParametersPerformanceRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event StrategyParametersPerformanceRowChangeEventHandler StrategyParametersPerformanceRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddStrategyParametersPerformanceRow(StrategyParametersPerformanceRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public StrategyParametersPerformanceRow AddStrategyParametersPerformanceRow(
                        string Instrument, 
                        float Performance, 
                        short Period, 
                        float _OB, 
                        float _OS, 
                        short _OscLength, 
                        short _TrendLength, 
                        bool MarketOrders, 
                        bool Reverse, 
                        short StopLongTicks, 
                        short StopShortTicks, 
                        short TargetLongTicks, 
                        short TargetShortTicks, 
                        int TimeBegin, 
                        int TimeEnd, 
                        float Total_Net_Profit, 
                        float Gross_Profit, 
                        float Gross_Loss, 
                        float Profit_Factor, 
                        float Cumulative_Profit, 
                        short Max_Drawdown, 
                        short Sharpe_Ratio, 
                        short Commission, 
                        short _Total___of_Trades, 
                        float Percent_Profitable, 
                        short ___of_Winning_Trades, 
                        short ___of_Losing_Trades, 
                        float Average_Trade, 
                        float Average_Winning_Trade, 
                        float Average_Losing_Trade, 
                        float Ratio_avg__Win___avg__Loss, 
                        short Max__conseq__Winners, 
                        short Max__conseq__Losers, 
                        float Largest_Winning_Trade, 
                        float Largest_Losing_Trade, 
                        short ___of_Trades_per_Day, 
                        string Avg__Time_in_Market, 
                        float Profit_per_Month, 
                        float Max__Time_to_Recover, 
                        float Average_MAE, 
                        float Average_MFE, 
                        float Average_ETD, 
                        System.DateTime CreateDate, 
                        System.DateTime ModifyDate) {
                StrategyParametersPerformanceRow rowStrategyParametersPerformanceRow = ((StrategyParametersPerformanceRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Instrument,
                        Performance,
                        Period,
                        _OB,
                        _OS,
                        _OscLength,
                        _TrendLength,
                        MarketOrders,
                        Reverse,
                        StopLongTicks,
                        StopShortTicks,
                        TargetLongTicks,
                        TargetShortTicks,
                        TimeBegin,
                        TimeEnd,
                        Total_Net_Profit,
                        Gross_Profit,
                        Gross_Loss,
                        Profit_Factor,
                        Cumulative_Profit,
                        Max_Drawdown,
                        Sharpe_Ratio,
                        Commission,
                        _Total___of_Trades,
                        Percent_Profitable,
                        ___of_Winning_Trades,
                        ___of_Losing_Trades,
                        Average_Trade,
                        Average_Winning_Trade,
                        Average_Losing_Trade,
                        Ratio_avg__Win___avg__Loss,
                        Max__conseq__Winners,
                        Max__conseq__Losers,
                        Largest_Winning_Trade,
                        Largest_Losing_Trade,
                        ___of_Trades_per_Day,
                        Avg__Time_in_Market,
                        Profit_per_Month,
                        Max__Time_to_Recover,
                        Average_MAE,
                        Average_MFE,
                        Average_ETD,
                        CreateDate,
                        ModifyDate};
                rowStrategyParametersPerformanceRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowStrategyParametersPerformanceRow);
                return rowStrategyParametersPerformanceRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public StrategyParametersPerformanceRow FindByInstrument(string Instrument) {
                return ((StrategyParametersPerformanceRow)(this.Rows.Find(new object[] {
                            Instrument})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                StrategyParametersPerformanceDataTable cln = ((StrategyParametersPerformanceDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new StrategyParametersPerformanceDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnInstrument = base.Columns["Instrument"];
                this.columnPerformance = base.Columns["Performance"];
                this.columnPeriod = base.Columns["Period"];
                this.column_OB = base.Columns["_OB"];
                this.column_OS = base.Columns["_OS"];
                this.column_OscLength = base.Columns["_OscLength"];
                this.column_TrendLength = base.Columns["_TrendLength"];
                this.columnMarketOrders = base.Columns["MarketOrders"];
                this.columnReverse = base.Columns["Reverse"];
                this.columnStopLongTicks = base.Columns["StopLongTicks"];
                this.columnStopShortTicks = base.Columns["StopShortTicks"];
                this.columnTargetLongTicks = base.Columns["TargetLongTicks"];
                this.columnTargetShortTicks = base.Columns["TargetShortTicks"];
                this.columnTimeBegin = base.Columns["TimeBegin"];
                this.columnTimeEnd = base.Columns["TimeEnd"];
                this.columnTotal_Net_Profit = base.Columns["Total Net Profit"];
                this.columnGross_Profit = base.Columns["Gross Profit"];
                this.columnGross_Loss = base.Columns["Gross Loss"];
                this.columnProfit_Factor = base.Columns["Profit Factor"];
                this.columnCumulative_Profit = base.Columns["Cumulative Profit"];
                this.columnMax_Drawdown = base.Columns["Max Drawdown"];
                this.columnSharpe_Ratio = base.Columns["Sharpe Ratio"];
                this.columnCommission = base.Columns["Commission"];
                this._columnTotal___of_Trades = base.Columns["Total # of Trades"];
                this.columnPercent_Profitable = base.Columns["Percent Profitable"];
                this._column__of_Winning_Trades = base.Columns["# of Winning Trades"];
                this._column__of_Losing_Trades = base.Columns["# of Losing Trades"];
                this.columnAverage_Trade = base.Columns["Average Trade"];
                this.columnAverage_Winning_Trade = base.Columns["Average Winning Trade"];
                this.columnAverage_Losing_Trade = base.Columns["Average Losing Trade"];
                this.columnRatio_avg__Win___avg__Loss = base.Columns["Ratio avg  Win   avg  Loss"];
                this.columnMax__conseq__Winners = base.Columns["Max  conseq  Winners"];
                this.columnMax__conseq__Losers = base.Columns["Max  conseq  Losers"];
                this.columnLargest_Winning_Trade = base.Columns["Largest Winning Trade"];
                this.columnLargest_Losing_Trade = base.Columns["Largest Losing Trade"];
                this._column__of_Trades_per_Day = base.Columns["# of Trades per Day"];
                this.columnAvg__Time_in_Market = base.Columns["Avg  Time in Market"];
                this.columnProfit_per_Month = base.Columns["Profit per Month"];
                this.columnMax__Time_to_Recover = base.Columns["Max  Time to Recover"];
                this.columnAverage_MAE = base.Columns["Average MAE"];
                this.columnAverage_MFE = base.Columns["Average MFE"];
                this.columnAverage_ETD = base.Columns["Average ETD"];
                this.columnCreateDate = base.Columns["CreateDate"];
                this.columnModifyDate = base.Columns["ModifyDate"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnInstrument = new global::System.Data.DataColumn("Instrument", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInstrument);
                this.columnPerformance = new global::System.Data.DataColumn("Performance", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPerformance);
                this.columnPeriod = new global::System.Data.DataColumn("Period", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPeriod);
                this.column_OB = new global::System.Data.DataColumn("_OB", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column_OB);
                this.column_OS = new global::System.Data.DataColumn("_OS", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column_OS);
                this.column_OscLength = new global::System.Data.DataColumn("_OscLength", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column_OscLength);
                this.column_TrendLength = new global::System.Data.DataColumn("_TrendLength", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column_TrendLength);
                this.columnMarketOrders = new global::System.Data.DataColumn("MarketOrders", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMarketOrders);
                this.columnReverse = new global::System.Data.DataColumn("Reverse", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReverse);
                this.columnStopLongTicks = new global::System.Data.DataColumn("StopLongTicks", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStopLongTicks);
                this.columnStopShortTicks = new global::System.Data.DataColumn("StopShortTicks", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStopShortTicks);
                this.columnTargetLongTicks = new global::System.Data.DataColumn("TargetLongTicks", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTargetLongTicks);
                this.columnTargetShortTicks = new global::System.Data.DataColumn("TargetShortTicks", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTargetShortTicks);
                this.columnTimeBegin = new global::System.Data.DataColumn("TimeBegin", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTimeBegin);
                this.columnTimeEnd = new global::System.Data.DataColumn("TimeEnd", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTimeEnd);
                this.columnTotal_Net_Profit = new global::System.Data.DataColumn("Total Net Profit", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotal_Net_Profit);
                this.columnGross_Profit = new global::System.Data.DataColumn("Gross Profit", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGross_Profit);
                this.columnGross_Loss = new global::System.Data.DataColumn("Gross Loss", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGross_Loss);
                this.columnProfit_Factor = new global::System.Data.DataColumn("Profit Factor", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProfit_Factor);
                this.columnCumulative_Profit = new global::System.Data.DataColumn("Cumulative Profit", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCumulative_Profit);
                this.columnMax_Drawdown = new global::System.Data.DataColumn("Max Drawdown", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMax_Drawdown);
                this.columnSharpe_Ratio = new global::System.Data.DataColumn("Sharpe Ratio", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSharpe_Ratio);
                this.columnCommission = new global::System.Data.DataColumn("Commission", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCommission);
                this._columnTotal___of_Trades = new global::System.Data.DataColumn("Total # of Trades", typeof(short), null, global::System.Data.MappingType.Element);
                this._columnTotal___of_Trades.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnTotal___of_Trades");
                this._columnTotal___of_Trades.ExtendedProperties.Add("Generator_UserColumnName", "Total # of Trades");
                base.Columns.Add(this._columnTotal___of_Trades);
                this.columnPercent_Profitable = new global::System.Data.DataColumn("Percent Profitable", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPercent_Profitable);
                this._column__of_Winning_Trades = new global::System.Data.DataColumn("# of Winning Trades", typeof(short), null, global::System.Data.MappingType.Element);
                this._column__of_Winning_Trades.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_column__of_Winning_Trades");
                this._column__of_Winning_Trades.ExtendedProperties.Add("Generator_UserColumnName", "# of Winning Trades");
                base.Columns.Add(this._column__of_Winning_Trades);
                this._column__of_Losing_Trades = new global::System.Data.DataColumn("# of Losing Trades", typeof(short), null, global::System.Data.MappingType.Element);
                this._column__of_Losing_Trades.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_column__of_Losing_Trades");
                this._column__of_Losing_Trades.ExtendedProperties.Add("Generator_UserColumnName", "# of Losing Trades");
                base.Columns.Add(this._column__of_Losing_Trades);
                this.columnAverage_Trade = new global::System.Data.DataColumn("Average Trade", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAverage_Trade);
                this.columnAverage_Winning_Trade = new global::System.Data.DataColumn("Average Winning Trade", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAverage_Winning_Trade);
                this.columnAverage_Losing_Trade = new global::System.Data.DataColumn("Average Losing Trade", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAverage_Losing_Trade);
                this.columnRatio_avg__Win___avg__Loss = new global::System.Data.DataColumn("Ratio avg  Win   avg  Loss", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRatio_avg__Win___avg__Loss);
                this.columnMax__conseq__Winners = new global::System.Data.DataColumn("Max  conseq  Winners", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMax__conseq__Winners);
                this.columnMax__conseq__Losers = new global::System.Data.DataColumn("Max  conseq  Losers", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMax__conseq__Losers);
                this.columnLargest_Winning_Trade = new global::System.Data.DataColumn("Largest Winning Trade", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLargest_Winning_Trade);
                this.columnLargest_Losing_Trade = new global::System.Data.DataColumn("Largest Losing Trade", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLargest_Losing_Trade);
                this._column__of_Trades_per_Day = new global::System.Data.DataColumn("# of Trades per Day", typeof(short), null, global::System.Data.MappingType.Element);
                this._column__of_Trades_per_Day.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_column__of_Trades_per_Day");
                this._column__of_Trades_per_Day.ExtendedProperties.Add("Generator_UserColumnName", "# of Trades per Day");
                base.Columns.Add(this._column__of_Trades_per_Day);
                this.columnAvg__Time_in_Market = new global::System.Data.DataColumn("Avg  Time in Market", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAvg__Time_in_Market);
                this.columnProfit_per_Month = new global::System.Data.DataColumn("Profit per Month", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProfit_per_Month);
                this.columnMax__Time_to_Recover = new global::System.Data.DataColumn("Max  Time to Recover", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMax__Time_to_Recover);
                this.columnAverage_MAE = new global::System.Data.DataColumn("Average MAE", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAverage_MAE);
                this.columnAverage_MFE = new global::System.Data.DataColumn("Average MFE", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAverage_MFE);
                this.columnAverage_ETD = new global::System.Data.DataColumn("Average ETD", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAverage_ETD);
                this.columnCreateDate = new global::System.Data.DataColumn("CreateDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCreateDate);
                this.columnModifyDate = new global::System.Data.DataColumn("ModifyDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnModifyDate);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnInstrument}, true));
                this.columnInstrument.AllowDBNull = false;
                this.columnInstrument.Unique = true;
                this.columnInstrument.MaxLength = 15;
                this.columnAvg__Time_in_Market.MaxLength = 20;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public StrategyParametersPerformanceRow NewStrategyParametersPerformanceRow() {
                return ((StrategyParametersPerformanceRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new StrategyParametersPerformanceRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(StrategyParametersPerformanceRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.StrategyParametersPerformanceRowChanged != null)) {
                    this.StrategyParametersPerformanceRowChanged(this, new StrategyParametersPerformanceRowChangeEvent(((StrategyParametersPerformanceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.StrategyParametersPerformanceRowChanging != null)) {
                    this.StrategyParametersPerformanceRowChanging(this, new StrategyParametersPerformanceRowChangeEvent(((StrategyParametersPerformanceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.StrategyParametersPerformanceRowDeleted != null)) {
                    this.StrategyParametersPerformanceRowDeleted(this, new StrategyParametersPerformanceRowChangeEvent(((StrategyParametersPerformanceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.StrategyParametersPerformanceRowDeleting != null)) {
                    this.StrategyParametersPerformanceRowDeleting(this, new StrategyParametersPerformanceRowChangeEvent(((StrategyParametersPerformanceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveStrategyParametersPerformanceRow(StrategyParametersPerformanceRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                EFundDataSet ds = new EFundDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "StrategyParametersPerformanceDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class StrategyParametersPerformanceRow : global::System.Data.DataRow {
            
            private StrategyParametersPerformanceDataTable tableStrategyParametersPerformance;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal StrategyParametersPerformanceRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableStrategyParametersPerformance = ((StrategyParametersPerformanceDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Instrument {
                get {
                    return ((string)(this[this.tableStrategyParametersPerformance.InstrumentColumn]));
                }
                set {
                    this[this.tableStrategyParametersPerformance.InstrumentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public float Performance {
                get {
                    try {
                        return ((float)(this[this.tableStrategyParametersPerformance.PerformanceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Performance\' in table \'StrategyParametersPerformance\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableStrategyParametersPerformance.PerformanceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public short Period {
                get {
                    try {
                        return ((short)(this[this.tableStrategyParametersPerformance.PeriodColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Period\' in table \'StrategyParametersPerformance\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableStrategyParametersPerformance.PeriodColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public float _OB {
                get {
                    try {
                        return ((float)(this[this.tableStrategyParametersPerformance._OBColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'_OB\' in table \'StrategyParametersPerformance\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStrategyParametersPerformance._OBColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public float _OS {
                get {
                    try {
                        return ((float)(this[this.tableStrategyParametersPerformance._OSColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'_OS\' in table \'StrategyParametersPerformance\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStrategyParametersPerformance._OSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public short _OscLength {
                get {
                    try {
                        return ((short)(this[this.tableStrategyParametersPerformance._OscLengthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'_OscLength\' in table \'StrategyParametersPerformance\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableStrategyParametersPerformance._OscLengthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public short _TrendLength {
                get {
                    try {
                        return ((short)(this[this.tableStrategyParametersPerformance._TrendLengthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'_TrendLength\' in table \'StrategyParametersPerformance\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableStrategyParametersPerformance._TrendLengthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool MarketOrders {
                get {
                    try {
                        return ((bool)(this[this.tableStrategyParametersPerformance.MarketOrdersColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MarketOrders\' in table \'StrategyParametersPerformance\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableStrategyParametersPerformance.MarketOrdersColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool Reverse {
                get {
                    try {
                        return ((bool)(this[this.tableStrategyParametersPerformance.ReverseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Reverse\' in table \'StrategyParametersPerformance\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableStrategyParametersPerformance.ReverseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public short StopLongTicks {
                get {
                    try {
                        return ((short)(this[this.tableStrategyParametersPerformance.StopLongTicksColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StopLongTicks\' in table \'StrategyParametersPerformance\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableStrategyParametersPerformance.StopLongTicksColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public short StopShortTicks {
                get {
                    try {
                        return ((short)(this[this.tableStrategyParametersPerformance.StopShortTicksColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StopShortTicks\' in table \'StrategyParametersPerformance\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tableStrategyParametersPerformance.StopShortTicksColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public short TargetLongTicks {
                get {
                    try {
                        return ((short)(this[this.tableStrategyParametersPerformance.TargetLongTicksColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TargetLongTicks\' in table \'StrategyParametersPerformance\' i" +
                                "s DBNull.", e);
                    }
                }
                set {
                    this[this.tableStrategyParametersPerformance.TargetLongTicksColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public short TargetShortTicks {
                get {
                    try {
                        return ((short)(this[this.tableStrategyParametersPerformance.TargetShortTicksColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TargetShortTicks\' in table \'StrategyParametersPerformance\' " +
                                "is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStrategyParametersPerformance.TargetShortTicksColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int TimeBegin {
                get {
                    try {
                        return ((int)(this[this.tableStrategyParametersPerformance.TimeBeginColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TimeBegin\' in table \'StrategyParametersPerformance\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableStrategyParametersPerformance.TimeBeginColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int TimeEnd {
                get {
                    try {
                        return ((int)(this[this.tableStrategyParametersPerformance.TimeEndColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TimeEnd\' in table \'StrategyParametersPerformance\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableStrategyParametersPerformance.TimeEndColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public float Total_Net_Profit {
                get {
                    try {
                        return ((float)(this[this.tableStrategyParametersPerformance.Total_Net_ProfitColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Total Net Profit\' in table \'StrategyParametersPerformance\' " +
                                "is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStrategyParametersPerformance.Total_Net_ProfitColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public float Gross_Profit {
                get {
                    try {
                        return ((float)(this[this.tableStrategyParametersPerformance.Gross_ProfitColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Gross Profit\' in table \'StrategyParametersPerformance\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableStrategyParametersPerformance.Gross_ProfitColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public float Gross_Loss {
                get {
                    try {
                        return ((float)(this[this.tableStrategyParametersPerformance.Gross_LossColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Gross Loss\' in table \'StrategyParametersPerformance\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableStrategyParametersPerformance.Gross_LossColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public float Profit_Factor {
                get {
                    try {
                        return ((float)(this[this.tableStrategyParametersPerformance.Profit_FactorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Profit Factor\' in table \'StrategyParametersPerformance\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableStrategyParametersPerformance.Profit_FactorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public float Cumulative_Profit {
                get {
                    try {
                        return ((float)(this[this.tableStrategyParametersPerformance.Cumulative_ProfitColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Cumulative Profit\' in table \'StrategyParametersPerformance\'" +
                                " is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStrategyParametersPerformance.Cumulative_ProfitColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public short Max_Drawdown {
                get {
                    try {
                        return ((short)(this[this.tableStrategyParametersPerformance.Max_DrawdownColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Max Drawdown\' in table \'StrategyParametersPerformance\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableStrategyParametersPerformance.Max_DrawdownColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public short Sharpe_Ratio {
                get {
                    try {
                        return ((short)(this[this.tableStrategyParametersPerformance.Sharpe_RatioColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Sharpe Ratio\' in table \'StrategyParametersPerformance\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableStrategyParametersPerformance.Sharpe_RatioColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public short Commission {
                get {
                    try {
                        return ((short)(this[this.tableStrategyParametersPerformance.CommissionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Commission\' in table \'StrategyParametersPerformance\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableStrategyParametersPerformance.CommissionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public short _Total___of_Trades {
                get {
                    try {
                        return ((short)(this[this.tableStrategyParametersPerformance._Total___of_TradesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Total # of Trades\' in table \'StrategyParametersPerformance\'" +
                                " is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStrategyParametersPerformance._Total___of_TradesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public float Percent_Profitable {
                get {
                    try {
                        return ((float)(this[this.tableStrategyParametersPerformance.Percent_ProfitableColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Percent Profitable\' in table \'StrategyParametersPerformance" +
                                "\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStrategyParametersPerformance.Percent_ProfitableColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public short ___of_Winning_Trades {
                get {
                    try {
                        return ((short)(this[this.tableStrategyParametersPerformance.___of_Winning_TradesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'# of Winning Trades\' in table \'StrategyParametersPerformanc" +
                                "e\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStrategyParametersPerformance.___of_Winning_TradesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public short ___of_Losing_Trades {
                get {
                    try {
                        return ((short)(this[this.tableStrategyParametersPerformance.___of_Losing_TradesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'# of Losing Trades\' in table \'StrategyParametersPerformance" +
                                "\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStrategyParametersPerformance.___of_Losing_TradesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public float Average_Trade {
                get {
                    try {
                        return ((float)(this[this.tableStrategyParametersPerformance.Average_TradeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Average Trade\' in table \'StrategyParametersPerformance\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableStrategyParametersPerformance.Average_TradeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public float Average_Winning_Trade {
                get {
                    try {
                        return ((float)(this[this.tableStrategyParametersPerformance.Average_Winning_TradeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Average Winning Trade\' in table \'StrategyParametersPerforma" +
                                "nce\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStrategyParametersPerformance.Average_Winning_TradeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public float Average_Losing_Trade {
                get {
                    try {
                        return ((float)(this[this.tableStrategyParametersPerformance.Average_Losing_TradeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Average Losing Trade\' in table \'StrategyParametersPerforman" +
                                "ce\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStrategyParametersPerformance.Average_Losing_TradeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public float Ratio_avg__Win___avg__Loss {
                get {
                    try {
                        return ((float)(this[this.tableStrategyParametersPerformance.Ratio_avg__Win___avg__LossColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Ratio avg  Win   avg  Loss\' in table \'StrategyParametersPer" +
                                "formance\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStrategyParametersPerformance.Ratio_avg__Win___avg__LossColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public short Max__conseq__Winners {
                get {
                    try {
                        return ((short)(this[this.tableStrategyParametersPerformance.Max__conseq__WinnersColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Max  conseq  Winners\' in table \'StrategyParametersPerforman" +
                                "ce\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStrategyParametersPerformance.Max__conseq__WinnersColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public short Max__conseq__Losers {
                get {
                    try {
                        return ((short)(this[this.tableStrategyParametersPerformance.Max__conseq__LosersColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Max  conseq  Losers\' in table \'StrategyParametersPerformanc" +
                                "e\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStrategyParametersPerformance.Max__conseq__LosersColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public float Largest_Winning_Trade {
                get {
                    try {
                        return ((float)(this[this.tableStrategyParametersPerformance.Largest_Winning_TradeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Largest Winning Trade\' in table \'StrategyParametersPerforma" +
                                "nce\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStrategyParametersPerformance.Largest_Winning_TradeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public float Largest_Losing_Trade {
                get {
                    try {
                        return ((float)(this[this.tableStrategyParametersPerformance.Largest_Losing_TradeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Largest Losing Trade\' in table \'StrategyParametersPerforman" +
                                "ce\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStrategyParametersPerformance.Largest_Losing_TradeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public short ___of_Trades_per_Day {
                get {
                    try {
                        return ((short)(this[this.tableStrategyParametersPerformance.___of_Trades_per_DayColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'# of Trades per Day\' in table \'StrategyParametersPerformanc" +
                                "e\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStrategyParametersPerformance.___of_Trades_per_DayColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Avg__Time_in_Market {
                get {
                    try {
                        return ((string)(this[this.tableStrategyParametersPerformance.Avg__Time_in_MarketColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Avg  Time in Market\' in table \'StrategyParametersPerformanc" +
                                "e\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStrategyParametersPerformance.Avg__Time_in_MarketColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public float Profit_per_Month {
                get {
                    try {
                        return ((float)(this[this.tableStrategyParametersPerformance.Profit_per_MonthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Profit per Month\' in table \'StrategyParametersPerformance\' " +
                                "is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStrategyParametersPerformance.Profit_per_MonthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public float Max__Time_to_Recover {
                get {
                    try {
                        return ((float)(this[this.tableStrategyParametersPerformance.Max__Time_to_RecoverColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Max  Time to Recover\' in table \'StrategyParametersPerforman" +
                                "ce\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStrategyParametersPerformance.Max__Time_to_RecoverColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public float Average_MAE {
                get {
                    try {
                        return ((float)(this[this.tableStrategyParametersPerformance.Average_MAEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Average MAE\' in table \'StrategyParametersPerformance\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableStrategyParametersPerformance.Average_MAEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public float Average_MFE {
                get {
                    try {
                        return ((float)(this[this.tableStrategyParametersPerformance.Average_MFEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Average MFE\' in table \'StrategyParametersPerformance\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableStrategyParametersPerformance.Average_MFEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public float Average_ETD {
                get {
                    try {
                        return ((float)(this[this.tableStrategyParametersPerformance.Average_ETDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Average ETD\' in table \'StrategyParametersPerformance\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableStrategyParametersPerformance.Average_ETDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public System.DateTime CreateDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableStrategyParametersPerformance.CreateDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CreateDate\' in table \'StrategyParametersPerformance\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableStrategyParametersPerformance.CreateDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public System.DateTime ModifyDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableStrategyParametersPerformance.ModifyDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ModifyDate\' in table \'StrategyParametersPerformance\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableStrategyParametersPerformance.ModifyDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsPerformanceNull() {
                return this.IsNull(this.tableStrategyParametersPerformance.PerformanceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetPerformanceNull() {
                this[this.tableStrategyParametersPerformance.PerformanceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsPeriodNull() {
                return this.IsNull(this.tableStrategyParametersPerformance.PeriodColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetPeriodNull() {
                this[this.tableStrategyParametersPerformance.PeriodColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool Is_OBNull() {
                return this.IsNull(this.tableStrategyParametersPerformance._OBColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void Set_OBNull() {
                this[this.tableStrategyParametersPerformance._OBColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool Is_OSNull() {
                return this.IsNull(this.tableStrategyParametersPerformance._OSColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void Set_OSNull() {
                this[this.tableStrategyParametersPerformance._OSColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool Is_OscLengthNull() {
                return this.IsNull(this.tableStrategyParametersPerformance._OscLengthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void Set_OscLengthNull() {
                this[this.tableStrategyParametersPerformance._OscLengthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool Is_TrendLengthNull() {
                return this.IsNull(this.tableStrategyParametersPerformance._TrendLengthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void Set_TrendLengthNull() {
                this[this.tableStrategyParametersPerformance._TrendLengthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsMarketOrdersNull() {
                return this.IsNull(this.tableStrategyParametersPerformance.MarketOrdersColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetMarketOrdersNull() {
                this[this.tableStrategyParametersPerformance.MarketOrdersColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsReverseNull() {
                return this.IsNull(this.tableStrategyParametersPerformance.ReverseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetReverseNull() {
                this[this.tableStrategyParametersPerformance.ReverseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsStopLongTicksNull() {
                return this.IsNull(this.tableStrategyParametersPerformance.StopLongTicksColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetStopLongTicksNull() {
                this[this.tableStrategyParametersPerformance.StopLongTicksColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsStopShortTicksNull() {
                return this.IsNull(this.tableStrategyParametersPerformance.StopShortTicksColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetStopShortTicksNull() {
                this[this.tableStrategyParametersPerformance.StopShortTicksColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTargetLongTicksNull() {
                return this.IsNull(this.tableStrategyParametersPerformance.TargetLongTicksColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTargetLongTicksNull() {
                this[this.tableStrategyParametersPerformance.TargetLongTicksColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTargetShortTicksNull() {
                return this.IsNull(this.tableStrategyParametersPerformance.TargetShortTicksColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTargetShortTicksNull() {
                this[this.tableStrategyParametersPerformance.TargetShortTicksColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTimeBeginNull() {
                return this.IsNull(this.tableStrategyParametersPerformance.TimeBeginColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTimeBeginNull() {
                this[this.tableStrategyParametersPerformance.TimeBeginColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTimeEndNull() {
                return this.IsNull(this.tableStrategyParametersPerformance.TimeEndColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTimeEndNull() {
                this[this.tableStrategyParametersPerformance.TimeEndColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTotal_Net_ProfitNull() {
                return this.IsNull(this.tableStrategyParametersPerformance.Total_Net_ProfitColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTotal_Net_ProfitNull() {
                this[this.tableStrategyParametersPerformance.Total_Net_ProfitColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsGross_ProfitNull() {
                return this.IsNull(this.tableStrategyParametersPerformance.Gross_ProfitColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetGross_ProfitNull() {
                this[this.tableStrategyParametersPerformance.Gross_ProfitColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsGross_LossNull() {
                return this.IsNull(this.tableStrategyParametersPerformance.Gross_LossColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetGross_LossNull() {
                this[this.tableStrategyParametersPerformance.Gross_LossColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsProfit_FactorNull() {
                return this.IsNull(this.tableStrategyParametersPerformance.Profit_FactorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetProfit_FactorNull() {
                this[this.tableStrategyParametersPerformance.Profit_FactorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsCumulative_ProfitNull() {
                return this.IsNull(this.tableStrategyParametersPerformance.Cumulative_ProfitColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetCumulative_ProfitNull() {
                this[this.tableStrategyParametersPerformance.Cumulative_ProfitColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsMax_DrawdownNull() {
                return this.IsNull(this.tableStrategyParametersPerformance.Max_DrawdownColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetMax_DrawdownNull() {
                this[this.tableStrategyParametersPerformance.Max_DrawdownColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsSharpe_RatioNull() {
                return this.IsNull(this.tableStrategyParametersPerformance.Sharpe_RatioColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetSharpe_RatioNull() {
                this[this.tableStrategyParametersPerformance.Sharpe_RatioColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsCommissionNull() {
                return this.IsNull(this.tableStrategyParametersPerformance.CommissionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetCommissionNull() {
                this[this.tableStrategyParametersPerformance.CommissionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool Is_Total___of_TradesNull() {
                return this.IsNull(this.tableStrategyParametersPerformance._Total___of_TradesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void Set_Total___of_TradesNull() {
                this[this.tableStrategyParametersPerformance._Total___of_TradesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsPercent_ProfitableNull() {
                return this.IsNull(this.tableStrategyParametersPerformance.Percent_ProfitableColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetPercent_ProfitableNull() {
                this[this.tableStrategyParametersPerformance.Percent_ProfitableColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool Is___of_Winning_TradesNull() {
                return this.IsNull(this.tableStrategyParametersPerformance.___of_Winning_TradesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void Set___of_Winning_TradesNull() {
                this[this.tableStrategyParametersPerformance.___of_Winning_TradesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool Is___of_Losing_TradesNull() {
                return this.IsNull(this.tableStrategyParametersPerformance.___of_Losing_TradesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void Set___of_Losing_TradesNull() {
                this[this.tableStrategyParametersPerformance.___of_Losing_TradesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsAverage_TradeNull() {
                return this.IsNull(this.tableStrategyParametersPerformance.Average_TradeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetAverage_TradeNull() {
                this[this.tableStrategyParametersPerformance.Average_TradeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsAverage_Winning_TradeNull() {
                return this.IsNull(this.tableStrategyParametersPerformance.Average_Winning_TradeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetAverage_Winning_TradeNull() {
                this[this.tableStrategyParametersPerformance.Average_Winning_TradeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsAverage_Losing_TradeNull() {
                return this.IsNull(this.tableStrategyParametersPerformance.Average_Losing_TradeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetAverage_Losing_TradeNull() {
                this[this.tableStrategyParametersPerformance.Average_Losing_TradeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsRatio_avg__Win___avg__LossNull() {
                return this.IsNull(this.tableStrategyParametersPerformance.Ratio_avg__Win___avg__LossColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetRatio_avg__Win___avg__LossNull() {
                this[this.tableStrategyParametersPerformance.Ratio_avg__Win___avg__LossColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsMax__conseq__WinnersNull() {
                return this.IsNull(this.tableStrategyParametersPerformance.Max__conseq__WinnersColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetMax__conseq__WinnersNull() {
                this[this.tableStrategyParametersPerformance.Max__conseq__WinnersColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsMax__conseq__LosersNull() {
                return this.IsNull(this.tableStrategyParametersPerformance.Max__conseq__LosersColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetMax__conseq__LosersNull() {
                this[this.tableStrategyParametersPerformance.Max__conseq__LosersColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsLargest_Winning_TradeNull() {
                return this.IsNull(this.tableStrategyParametersPerformance.Largest_Winning_TradeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetLargest_Winning_TradeNull() {
                this[this.tableStrategyParametersPerformance.Largest_Winning_TradeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsLargest_Losing_TradeNull() {
                return this.IsNull(this.tableStrategyParametersPerformance.Largest_Losing_TradeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetLargest_Losing_TradeNull() {
                this[this.tableStrategyParametersPerformance.Largest_Losing_TradeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool Is___of_Trades_per_DayNull() {
                return this.IsNull(this.tableStrategyParametersPerformance.___of_Trades_per_DayColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void Set___of_Trades_per_DayNull() {
                this[this.tableStrategyParametersPerformance.___of_Trades_per_DayColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsAvg__Time_in_MarketNull() {
                return this.IsNull(this.tableStrategyParametersPerformance.Avg__Time_in_MarketColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetAvg__Time_in_MarketNull() {
                this[this.tableStrategyParametersPerformance.Avg__Time_in_MarketColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsProfit_per_MonthNull() {
                return this.IsNull(this.tableStrategyParametersPerformance.Profit_per_MonthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetProfit_per_MonthNull() {
                this[this.tableStrategyParametersPerformance.Profit_per_MonthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsMax__Time_to_RecoverNull() {
                return this.IsNull(this.tableStrategyParametersPerformance.Max__Time_to_RecoverColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetMax__Time_to_RecoverNull() {
                this[this.tableStrategyParametersPerformance.Max__Time_to_RecoverColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsAverage_MAENull() {
                return this.IsNull(this.tableStrategyParametersPerformance.Average_MAEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetAverage_MAENull() {
                this[this.tableStrategyParametersPerformance.Average_MAEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsAverage_MFENull() {
                return this.IsNull(this.tableStrategyParametersPerformance.Average_MFEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetAverage_MFENull() {
                this[this.tableStrategyParametersPerformance.Average_MFEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsAverage_ETDNull() {
                return this.IsNull(this.tableStrategyParametersPerformance.Average_ETDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetAverage_ETDNull() {
                this[this.tableStrategyParametersPerformance.Average_ETDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsCreateDateNull() {
                return this.IsNull(this.tableStrategyParametersPerformance.CreateDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetCreateDateNull() {
                this[this.tableStrategyParametersPerformance.CreateDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsModifyDateNull() {
                return this.IsNull(this.tableStrategyParametersPerformance.ModifyDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetModifyDateNull() {
                this[this.tableStrategyParametersPerformance.ModifyDateColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class StrategyParametersPerformanceRowChangeEvent : global::System.EventArgs {
            
            private StrategyParametersPerformanceRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public StrategyParametersPerformanceRowChangeEvent(StrategyParametersPerformanceRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public StrategyParametersPerformanceRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace EGIControlButtonsv1.EFundDataSetTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class StrategyParametersPerformanceTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public StrategyParametersPerformanceTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "StrategyParametersPerformance";
            tableMapping.ColumnMappings.Add("Instrument", "Instrument");
            tableMapping.ColumnMappings.Add("Performance", "Performance");
            tableMapping.ColumnMappings.Add("Period", "Period");
            tableMapping.ColumnMappings.Add("_OB", "_OB");
            tableMapping.ColumnMappings.Add("_OS", "_OS");
            tableMapping.ColumnMappings.Add("_OscLength", "_OscLength");
            tableMapping.ColumnMappings.Add("_TrendLength", "_TrendLength");
            tableMapping.ColumnMappings.Add("MarketOrders", "MarketOrders");
            tableMapping.ColumnMappings.Add("Reverse", "Reverse");
            tableMapping.ColumnMappings.Add("StopLongTicks", "StopLongTicks");
            tableMapping.ColumnMappings.Add("StopShortTicks", "StopShortTicks");
            tableMapping.ColumnMappings.Add("TargetLongTicks", "TargetLongTicks");
            tableMapping.ColumnMappings.Add("TargetShortTicks", "TargetShortTicks");
            tableMapping.ColumnMappings.Add("TimeBegin", "TimeBegin");
            tableMapping.ColumnMappings.Add("TimeEnd", "TimeEnd");
            tableMapping.ColumnMappings.Add("Total Net Profit", "Total Net Profit");
            tableMapping.ColumnMappings.Add("Gross Profit", "Gross Profit");
            tableMapping.ColumnMappings.Add("Gross Loss", "Gross Loss");
            tableMapping.ColumnMappings.Add("Profit Factor", "Profit Factor");
            tableMapping.ColumnMappings.Add("Cumulative Profit", "Cumulative Profit");
            tableMapping.ColumnMappings.Add("Max Drawdown", "Max Drawdown");
            tableMapping.ColumnMappings.Add("Sharpe Ratio", "Sharpe Ratio");
            tableMapping.ColumnMappings.Add("Commission", "Commission");
            tableMapping.ColumnMappings.Add("Total # of Trades", "Total # of Trades");
            tableMapping.ColumnMappings.Add("Percent Profitable", "Percent Profitable");
            tableMapping.ColumnMappings.Add("# of Winning Trades", "# of Winning Trades");
            tableMapping.ColumnMappings.Add("# of Losing Trades", "# of Losing Trades");
            tableMapping.ColumnMappings.Add("Average Trade", "Average Trade");
            tableMapping.ColumnMappings.Add("Average Winning Trade", "Average Winning Trade");
            tableMapping.ColumnMappings.Add("Average Losing Trade", "Average Losing Trade");
            tableMapping.ColumnMappings.Add("Ratio avg  Win   avg  Loss", "Ratio avg  Win   avg  Loss");
            tableMapping.ColumnMappings.Add("Max  conseq  Winners", "Max  conseq  Winners");
            tableMapping.ColumnMappings.Add("Max  conseq  Losers", "Max  conseq  Losers");
            tableMapping.ColumnMappings.Add("Largest Winning Trade", "Largest Winning Trade");
            tableMapping.ColumnMappings.Add("Largest Losing Trade", "Largest Losing Trade");
            tableMapping.ColumnMappings.Add("# of Trades per Day", "# of Trades per Day");
            tableMapping.ColumnMappings.Add("Avg  Time in Market", "Avg  Time in Market");
            tableMapping.ColumnMappings.Add("Profit per Month", "Profit per Month");
            tableMapping.ColumnMappings.Add("Max  Time to Recover", "Max  Time to Recover");
            tableMapping.ColumnMappings.Add("Average MAE", "Average MAE");
            tableMapping.ColumnMappings.Add("Average MFE", "Average MFE");
            tableMapping.ColumnMappings.Add("Average ETD", "Average ETD");
            tableMapping.ColumnMappings.Add("CreateDate", "CreateDate");
            tableMapping.ColumnMappings.Add("ModifyDate", "ModifyDate");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [PIPrecisionEntry].[StrategyParametersPerformance] WHERE (([Instrumen" +
                "t] = @Original_Instrument) AND ((@IsNull_Performance = 1 AND [Performance] IS NU" +
                "LL) OR ([Performance] = @Original_Performance)) AND ((@IsNull_Period = 1 AND [Pe" +
                "riod] IS NULL) OR ([Period] = @Original_Period)) AND ((@IsNull__OB = 1 AND [_OB]" +
                " IS NULL) OR ([_OB] = @Original__OB)) AND ((@IsNull__OS = 1 AND [_OS] IS NULL) O" +
                "R ([_OS] = @Original__OS)) AND ((@IsNull__OscLength = 1 AND [_OscLength] IS NULL" +
                ") OR ([_OscLength] = @Original__OscLength)) AND ((@IsNull__TrendLength = 1 AND [" +
                "_TrendLength] IS NULL) OR ([_TrendLength] = @Original__TrendLength)) AND ((@IsNu" +
                "ll_MarketOrders = 1 AND [MarketOrders] IS NULL) OR ([MarketOrders] = @Original_M" +
                "arketOrders)) AND ((@IsNull_Reverse = 1 AND [Reverse] IS NULL) OR ([Reverse] = @" +
                "Original_Reverse)) AND ((@IsNull_StopLongTicks = 1 AND [StopLongTicks] IS NULL) " +
                "OR ([StopLongTicks] = @Original_StopLongTicks)) AND ((@IsNull_StopShortTicks = 1" +
                " AND [StopShortTicks] IS NULL) OR ([StopShortTicks] = @Original_StopShortTicks))" +
                " AND ((@IsNull_TargetLongTicks = 1 AND [TargetLongTicks] IS NULL) OR ([TargetLon" +
                "gTicks] = @Original_TargetLongTicks)) AND ((@IsNull_TargetShortTicks = 1 AND [Ta" +
                "rgetShortTicks] IS NULL) OR ([TargetShortTicks] = @Original_TargetShortTicks)) A" +
                "ND ((@IsNull_TimeBegin = 1 AND [TimeBegin] IS NULL) OR ([TimeBegin] = @Original_" +
                "TimeBegin)) AND ((@IsNull_TimeEnd = 1 AND [TimeEnd] IS NULL) OR ([TimeEnd] = @Or" +
                "iginal_TimeEnd)) AND ((@IsNull_Total_Net_Profit = 1 AND [Total Net Profit] IS NU" +
                "LL) OR ([Total Net Profit] = @Original_Total_Net_Profit)) AND ((@IsNull_Gross_Pr" +
                "ofit = 1 AND [Gross Profit] IS NULL) OR ([Gross Profit] = @Original_Gross_Profit" +
                ")) AND ((@IsNull_Gross_Loss = 1 AND [Gross Loss] IS NULL) OR ([Gross Loss] = @Or" +
                "iginal_Gross_Loss)) AND ((@IsNull_Profit_Factor = 1 AND [Profit Factor] IS NULL)" +
                " OR ([Profit Factor] = @Original_Profit_Factor)) AND ((@IsNull_Cumulative_Profit" +
                " = 1 AND [Cumulative Profit] IS NULL) OR ([Cumulative Profit] = @Original_Cumula" +
                "tive_Profit)) AND ((@IsNull_Max_Drawdown = 1 AND [Max Drawdown] IS NULL) OR ([Ma" +
                "x Drawdown] = @Original_Max_Drawdown)) AND ((@IsNull_Sharpe_Ratio = 1 AND [Sharp" +
                "e Ratio] IS NULL) OR ([Sharpe Ratio] = @Original_Sharpe_Ratio)) AND ((@IsNull_Co" +
                "mmission = 1 AND [Commission] IS NULL) OR ([Commission] = @Original_Commission))" +
                " AND ((@IsNull_Total_#_of_Trades = 1 AND [Total # of Trades] IS NULL) OR ([Total" +
                " # of Trades] = @Original_Total_#_of_Trades)) AND ((@IsNull_Percent_Profitable =" +
                " 1 AND [Percent Profitable] IS NULL) OR ([Percent Profitable] = @Original_Percen" +
                "t_Profitable)) AND ((@IsNull_#_of_Winning_Trades = 1 AND [# of Winning Trades] I" +
                "S NULL) OR ([# of Winning Trades] = @Original_#_of_Winning_Trades)) AND ((@IsNul" +
                "l_#_of_Losing_Trades = 1 AND [# of Losing Trades] IS NULL) OR ([# of Losing Trad" +
                "es] = @Original_#_of_Losing_Trades)) AND ((@IsNull_Average_Trade = 1 AND [Averag" +
                "e Trade] IS NULL) OR ([Average Trade] = @Original_Average_Trade)) AND ((@IsNull_" +
                "Average_Winning_Trade = 1 AND [Average Winning Trade] IS NULL) OR ([Average Winn" +
                "ing Trade] = @Original_Average_Winning_Trade)) AND ((@IsNull_Average_Losing_Trad" +
                "e = 1 AND [Average Losing Trade] IS NULL) OR ([Average Losing Trade] = @Original" +
                "_Average_Losing_Trade)) AND ((@IsNull_Ratio_avg__Win___avg__Loss = 1 AND [Ratio " +
                "avg  Win   avg  Loss] IS NULL) OR ([Ratio avg  Win   avg  Loss] = @Original_Rati" +
                "o_avg__Win___avg__Loss)) AND ((@IsNull_Max__conseq__Winners = 1 AND [Max  conseq" +
                "  Winners] IS NULL) OR ([Max  conseq  Winners] = @Original_Max__conseq__Winners)" +
                ") AND ((@IsNull_Max__conseq__Losers = 1 AND [Max  conseq  Losers] IS NULL) OR ([" +
                "Max  conseq  Losers] = @Original_Max__conseq__Losers)) AND ((@IsNull_Largest_Win" +
                "ning_Trade = 1 AND [Largest Winning Trade] IS NULL) OR ([Largest Winning Trade] " +
                "= @Original_Largest_Winning_Trade)) AND ((@IsNull_Largest_Losing_Trade = 1 AND [" +
                "Largest Losing Trade] IS NULL) OR ([Largest Losing Trade] = @Original_Largest_Lo" +
                "sing_Trade)) AND ((@IsNull_#_of_Trades_per_Day = 1 AND [# of Trades per Day] IS " +
                "NULL) OR ([# of Trades per Day] = @Original_#_of_Trades_per_Day)) AND ((@IsNull_" +
                "Avg__Time_in_Market = 1 AND [Avg  Time in Market] IS NULL) OR ([Avg  Time in Mar" +
                "ket] = @Original_Avg__Time_in_Market)) AND ((@IsNull_Profit_per_Month = 1 AND [P" +
                "rofit per Month] IS NULL) OR ([Profit per Month] = @Original_Profit_per_Month)) " +
                "AND ((@IsNull_Max__Time_to_Recover = 1 AND [Max  Time to Recover] IS NULL) OR ([" +
                "Max  Time to Recover] = @Original_Max__Time_to_Recover)) AND ((@IsNull_Average_M" +
                "AE = 1 AND [Average MAE] IS NULL) OR ([Average MAE] = @Original_Average_MAE)) AN" +
                "D ((@IsNull_Average_MFE = 1 AND [Average MFE] IS NULL) OR ([Average MFE] = @Orig" +
                "inal_Average_MFE)) AND ((@IsNull_Average_ETD = 1 AND [Average ETD] IS NULL) OR (" +
                "[Average ETD] = @Original_Average_ETD)) AND ((@IsNull_CreateDate = 1 AND [Create" +
                "Date] IS NULL) OR ([CreateDate] = @Original_CreateDate)) AND ((@IsNull_ModifyDat" +
                "e = 1 AND [ModifyDate] IS NULL) OR ([ModifyDate] = @Original_ModifyDate)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Instrument", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Instrument", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Performance", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Performance", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Performance", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Performance", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Period", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Period", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Period", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Period", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull__OB", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "_OB", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original__OB", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "_OB", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull__OS", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "_OS", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original__OS", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "_OS", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull__OscLength", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "_OscLength", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original__OscLength", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "_OscLength", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull__TrendLength", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "_TrendLength", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original__TrendLength", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "_TrendLength", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_MarketOrders", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MarketOrders", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MarketOrders", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MarketOrders", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Reverse", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Reverse", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Reverse", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Reverse", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_StopLongTicks", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StopLongTicks", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_StopLongTicks", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StopLongTicks", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_StopShortTicks", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StopShortTicks", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_StopShortTicks", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StopShortTicks", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_TargetLongTicks", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TargetLongTicks", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TargetLongTicks", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TargetLongTicks", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_TargetShortTicks", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TargetShortTicks", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TargetShortTicks", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TargetShortTicks", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_TimeBegin", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TimeBegin", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TimeBegin", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TimeBegin", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_TimeEnd", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TimeEnd", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TimeEnd", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TimeEnd", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Total_Net_Profit", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Total Net Profit", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Total_Net_Profit", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Total Net Profit", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Gross_Profit", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Gross Profit", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Gross_Profit", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Gross Profit", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Gross_Loss", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Gross Loss", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Gross_Loss", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Gross Loss", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Profit_Factor", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Profit Factor", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Profit_Factor", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Profit Factor", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Cumulative_Profit", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Cumulative Profit", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Cumulative_Profit", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Cumulative Profit", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Max_Drawdown", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Max Drawdown", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Max_Drawdown", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Max Drawdown", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Sharpe_Ratio", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Sharpe Ratio", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Sharpe_Ratio", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Sharpe Ratio", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Commission", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Commission", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Commission", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Commission", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Total_#_of_Trades", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Total # of Trades", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Total_#_of_Trades", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Total # of Trades", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Percent_Profitable", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Percent Profitable", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Percent_Profitable", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Percent Profitable", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_#_of_Winning_Trades", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "# of Winning Trades", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_#_of_Winning_Trades", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "# of Winning Trades", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_#_of_Losing_Trades", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "# of Losing Trades", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_#_of_Losing_Trades", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "# of Losing Trades", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Average_Trade", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Average Trade", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Average_Trade", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Average Trade", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Average_Winning_Trade", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Average Winning Trade", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Average_Winning_Trade", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Average Winning Trade", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Average_Losing_Trade", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Average Losing Trade", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Average_Losing_Trade", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Average Losing Trade", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Ratio_avg__Win___avg__Loss", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Ratio avg  Win   avg  Loss", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Ratio_avg__Win___avg__Loss", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Ratio avg  Win   avg  Loss", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Max__conseq__Winners", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Max  conseq  Winners", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Max__conseq__Winners", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Max  conseq  Winners", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Max__conseq__Losers", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Max  conseq  Losers", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Max__conseq__Losers", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Max  conseq  Losers", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Largest_Winning_Trade", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Largest Winning Trade", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Largest_Winning_Trade", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Largest Winning Trade", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Largest_Losing_Trade", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Largest Losing Trade", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Largest_Losing_Trade", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Largest Losing Trade", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_#_of_Trades_per_Day", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "# of Trades per Day", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_#_of_Trades_per_Day", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "# of Trades per Day", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Avg__Time_in_Market", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Avg  Time in Market", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Avg__Time_in_Market", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Avg  Time in Market", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Profit_per_Month", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Profit per Month", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Profit_per_Month", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Profit per Month", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Max__Time_to_Recover", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Max  Time to Recover", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Max__Time_to_Recover", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Max  Time to Recover", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Average_MAE", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Average MAE", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Average_MAE", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Average MAE", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Average_MFE", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Average MFE", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Average_MFE", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Average MFE", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Average_ETD", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Average ETD", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Average_ETD", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Average ETD", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_CreateDate", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CreateDate", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CreateDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CreateDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ModifyDate", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ModifyDate", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ModifyDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ModifyDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [PIPrecisionEntry].[StrategyParametersPerformance] ([Instrument], [Pe" +
                "rformance], [Period], [_OB], [_OS], [_OscLength], [_TrendLength], [MarketOrders]" +
                ", [Reverse], [StopLongTicks], [StopShortTicks], [TargetLongTicks], [TargetShortT" +
                "icks], [TimeBegin], [TimeEnd], [Total Net Profit], [Gross Profit], [Gross Loss]," +
                " [Profit Factor], [Cumulative Profit], [Max Drawdown], [Sharpe Ratio], [Commissi" +
                "on], [Total # of Trades], [Percent Profitable], [# of Winning Trades], [# of Los" +
                "ing Trades], [Average Trade], [Average Winning Trade], [Average Losing Trade], [" +
                "Ratio avg  Win   avg  Loss], [Max  conseq  Winners], [Max  conseq  Losers], [Lar" +
                "gest Winning Trade], [Largest Losing Trade], [# of Trades per Day], [Avg  Time i" +
                "n Market], [Profit per Month], [Max  Time to Recover], [Average MAE], [Average M" +
                "FE], [Average ETD], [CreateDate], [ModifyDate]) VALUES (@Instrument, @Performanc" +
                "e, @Period, @_OB, @_OS, @_OscLength, @_TrendLength, @MarketOrders, @Reverse, @St" +
                "opLongTicks, @StopShortTicks, @TargetLongTicks, @TargetShortTicks, @TimeBegin, @" +
                "TimeEnd, @Total_Net_Profit, @Gross_Profit, @Gross_Loss, @Profit_Factor, @Cumulat" +
                "ive_Profit, @Max_Drawdown, @Sharpe_Ratio, @Commission, @Total_#_of_Trades, @Perc" +
                "ent_Profitable, @#_of_Winning_Trades, @#_of_Losing_Trades, @Average_Trade, @Aver" +
                "age_Winning_Trade, @Average_Losing_Trade, @Ratio_avg__Win___avg__Loss, @Max__con" +
                "seq__Winners, @Max__conseq__Losers, @Largest_Winning_Trade, @Largest_Losing_Trad" +
                "e, @#_of_Trades_per_Day, @Avg__Time_in_Market, @Profit_per_Month, @Max__Time_to_" +
                "Recover, @Average_MAE, @Average_MFE, @Average_ETD, @CreateDate, @ModifyDate);\r\nS" +
                "ELECT Instrument, Performance, Period, _OB, _OS, _OscLength, _TrendLength, Marke" +
                "tOrders, Reverse, StopLongTicks, StopShortTicks, TargetLongTicks, TargetShortTic" +
                "ks, TimeBegin, TimeEnd, [Total Net Profit], [Gross Profit], [Gross Loss], [Profi" +
                "t Factor], [Cumulative Profit], [Max Drawdown], [Sharpe Ratio], Commission, [Tot" +
                "al # of Trades], [Percent Profitable], [# of Winning Trades], [# of Losing Trade" +
                "s], [Average Trade], [Average Winning Trade], [Average Losing Trade], [Ratio avg" +
                "  Win   avg  Loss], [Max  conseq  Winners], [Max  conseq  Losers], [Largest Winn" +
                "ing Trade], [Largest Losing Trade], [# of Trades per Day], [Avg  Time in Market]" +
                ", [Profit per Month], [Max  Time to Recover], [Average MAE], [Average MFE], [Ave" +
                "rage ETD], CreateDate, ModifyDate FROM PIPrecisionEntry.StrategyParametersPerfor" +
                "mance WHERE (Instrument = @Instrument)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Instrument", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Instrument", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Performance", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Performance", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Period", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Period", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@_OB", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "_OB", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@_OS", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "_OS", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@_OscLength", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "_OscLength", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@_TrendLength", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "_TrendLength", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MarketOrders", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MarketOrders", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Reverse", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Reverse", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@StopLongTicks", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StopLongTicks", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@StopShortTicks", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StopShortTicks", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TargetLongTicks", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TargetLongTicks", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TargetShortTicks", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TargetShortTicks", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TimeBegin", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TimeBegin", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TimeEnd", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TimeEnd", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Total_Net_Profit", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Total Net Profit", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Gross_Profit", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Gross Profit", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Gross_Loss", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Gross Loss", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Profit_Factor", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Profit Factor", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Cumulative_Profit", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Cumulative Profit", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Max_Drawdown", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Max Drawdown", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Sharpe_Ratio", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Sharpe Ratio", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Commission", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Commission", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Total_#_of_Trades", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Total # of Trades", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Percent_Profitable", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Percent Profitable", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@#_of_Winning_Trades", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "# of Winning Trades", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@#_of_Losing_Trades", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "# of Losing Trades", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Average_Trade", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Average Trade", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Average_Winning_Trade", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Average Winning Trade", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Average_Losing_Trade", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Average Losing Trade", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Ratio_avg__Win___avg__Loss", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Ratio avg  Win   avg  Loss", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Max__conseq__Winners", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Max  conseq  Winners", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Max__conseq__Losers", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Max  conseq  Losers", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Largest_Winning_Trade", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Largest Winning Trade", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Largest_Losing_Trade", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Largest Losing Trade", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@#_of_Trades_per_Day", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "# of Trades per Day", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Avg__Time_in_Market", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Avg  Time in Market", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Profit_per_Month", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Profit per Month", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Max__Time_to_Recover", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Max  Time to Recover", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Average_MAE", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Average MAE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Average_MFE", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Average MFE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Average_ETD", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Average ETD", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CreateDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CreateDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ModifyDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ModifyDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [PIPrecisionEntry].[StrategyParametersPerformance] SET [Instrument] = @Ins" +
                "trument, [Performance] = @Performance, [Period] = @Period, [_OB] = @_OB, [_OS] =" +
                " @_OS, [_OscLength] = @_OscLength, [_TrendLength] = @_TrendLength, [MarketOrders" +
                "] = @MarketOrders, [Reverse] = @Reverse, [StopLongTicks] = @StopLongTicks, [Stop" +
                "ShortTicks] = @StopShortTicks, [TargetLongTicks] = @TargetLongTicks, [TargetShor" +
                "tTicks] = @TargetShortTicks, [TimeBegin] = @TimeBegin, [TimeEnd] = @TimeEnd, [To" +
                "tal Net Profit] = @Total_Net_Profit, [Gross Profit] = @Gross_Profit, [Gross Loss" +
                "] = @Gross_Loss, [Profit Factor] = @Profit_Factor, [Cumulative Profit] = @Cumula" +
                "tive_Profit, [Max Drawdown] = @Max_Drawdown, [Sharpe Ratio] = @Sharpe_Ratio, [Co" +
                "mmission] = @Commission, [Total # of Trades] = @Total_#_of_Trades, [Percent Prof" +
                "itable] = @Percent_Profitable, [# of Winning Trades] = @#_of_Winning_Trades, [# " +
                "of Losing Trades] = @#_of_Losing_Trades, [Average Trade] = @Average_Trade, [Aver" +
                "age Winning Trade] = @Average_Winning_Trade, [Average Losing Trade] = @Average_L" +
                "osing_Trade, [Ratio avg  Win   avg  Loss] = @Ratio_avg__Win___avg__Loss, [Max  c" +
                "onseq  Winners] = @Max__conseq__Winners, [Max  conseq  Losers] = @Max__conseq__L" +
                "osers, [Largest Winning Trade] = @Largest_Winning_Trade, [Largest Losing Trade] " +
                "= @Largest_Losing_Trade, [# of Trades per Day] = @#_of_Trades_per_Day, [Avg  Tim" +
                "e in Market] = @Avg__Time_in_Market, [Profit per Month] = @Profit_per_Month, [Ma" +
                "x  Time to Recover] = @Max__Time_to_Recover, [Average MAE] = @Average_MAE, [Aver" +
                "age MFE] = @Average_MFE, [Average ETD] = @Average_ETD, [CreateDate] = @CreateDat" +
                "e, [ModifyDate] = @ModifyDate WHERE (([Instrument] = @Original_Instrument) AND (" +
                "(@IsNull_Performance = 1 AND [Performance] IS NULL) OR ([Performance] = @Origina" +
                "l_Performance)) AND ((@IsNull_Period = 1 AND [Period] IS NULL) OR ([Period] = @O" +
                "riginal_Period)) AND ((@IsNull__OB = 1 AND [_OB] IS NULL) OR ([_OB] = @Original_" +
                "_OB)) AND ((@IsNull__OS = 1 AND [_OS] IS NULL) OR ([_OS] = @Original__OS)) AND (" +
                "(@IsNull__OscLength = 1 AND [_OscLength] IS NULL) OR ([_OscLength] = @Original__" +
                "OscLength)) AND ((@IsNull__TrendLength = 1 AND [_TrendLength] IS NULL) OR ([_Tre" +
                "ndLength] = @Original__TrendLength)) AND ((@IsNull_MarketOrders = 1 AND [MarketO" +
                "rders] IS NULL) OR ([MarketOrders] = @Original_MarketOrders)) AND ((@IsNull_Reve" +
                "rse = 1 AND [Reverse] IS NULL) OR ([Reverse] = @Original_Reverse)) AND ((@IsNull" +
                "_StopLongTicks = 1 AND [StopLongTicks] IS NULL) OR ([StopLongTicks] = @Original_" +
                "StopLongTicks)) AND ((@IsNull_StopShortTicks = 1 AND [StopShortTicks] IS NULL) O" +
                "R ([StopShortTicks] = @Original_StopShortTicks)) AND ((@IsNull_TargetLongTicks =" +
                " 1 AND [TargetLongTicks] IS NULL) OR ([TargetLongTicks] = @Original_TargetLongTi" +
                "cks)) AND ((@IsNull_TargetShortTicks = 1 AND [TargetShortTicks] IS NULL) OR ([Ta" +
                "rgetShortTicks] = @Original_TargetShortTicks)) AND ((@IsNull_TimeBegin = 1 AND [" +
                "TimeBegin] IS NULL) OR ([TimeBegin] = @Original_TimeBegin)) AND ((@IsNull_TimeEn" +
                "d = 1 AND [TimeEnd] IS NULL) OR ([TimeEnd] = @Original_TimeEnd)) AND ((@IsNull_T" +
                "otal_Net_Profit = 1 AND [Total Net Profit] IS NULL) OR ([Total Net Profit] = @Or" +
                "iginal_Total_Net_Profit)) AND ((@IsNull_Gross_Profit = 1 AND [Gross Profit] IS N" +
                "ULL) OR ([Gross Profit] = @Original_Gross_Profit)) AND ((@IsNull_Gross_Loss = 1 " +
                "AND [Gross Loss] IS NULL) OR ([Gross Loss] = @Original_Gross_Loss)) AND ((@IsNul" +
                "l_Profit_Factor = 1 AND [Profit Factor] IS NULL) OR ([Profit Factor] = @Original" +
                "_Profit_Factor)) AND ((@IsNull_Cumulative_Profit = 1 AND [Cumulative Profit] IS " +
                "NULL) OR ([Cumulative Profit] = @Original_Cumulative_Profit)) AND ((@IsNull_Max_" +
                "Drawdown = 1 AND [Max Drawdown] IS NULL) OR ([Max Drawdown] = @Original_Max_Draw" +
                "down)) AND ((@IsNull_Sharpe_Ratio = 1 AND [Sharpe Ratio] IS NULL) OR ([Sharpe Ra" +
                "tio] = @Original_Sharpe_Ratio)) AND ((@IsNull_Commission = 1 AND [Commission] IS" +
                " NULL) OR ([Commission] = @Original_Commission)) AND ((@IsNull_Total_#_of_Trades" +
                " = 1 AND [Total # of Trades] IS NULL) OR ([Total # of Trades] = @Original_Total_" +
                "#_of_Trades)) AND ((@IsNull_Percent_Profitable = 1 AND [Percent Profitable] IS N" +
                "ULL) OR ([Percent Profitable] = @Original_Percent_Profitable)) AND ((@IsNull_#_o" +
                "f_Winning_Trades = 1 AND [# of Winning Trades] IS NULL) OR ([# of Winning Trades" +
                "] = @Original_#_of_Winning_Trades)) AND ((@IsNull_#_of_Losing_Trades = 1 AND [# " +
                "of Losing Trades] IS NULL) OR ([# of Losing Trades] = @Original_#_of_Losing_Trad" +
                "es)) AND ((@IsNull_Average_Trade = 1 AND [Average Trade] IS NULL) OR ([Average T" +
                "rade] = @Original_Average_Trade)) AND ((@IsNull_Average_Winning_Trade = 1 AND [A" +
                "verage Winning Trade] IS NULL) OR ([Average Winning Trade] = @Original_Average_W" +
                "inning_Trade)) AND ((@IsNull_Average_Losing_Trade = 1 AND [Average Losing Trade]" +
                " IS NULL) OR ([Average Losing Trade] = @Original_Average_Losing_Trade)) AND ((@I" +
                "sNull_Ratio_avg__Win___avg__Loss = 1 AND [Ratio avg  Win   avg  Loss] IS NULL) O" +
                "R ([Ratio avg  Win   avg  Loss] = @Original_Ratio_avg__Win___avg__Loss)) AND ((@" +
                "IsNull_Max__conseq__Winners = 1 AND [Max  conseq  Winners] IS NULL) OR ([Max  co" +
                "nseq  Winners] = @Original_Max__conseq__Winners)) AND ((@IsNull_Max__conseq__Los" +
                "ers = 1 AND [Max  conseq  Losers] IS NULL) OR ([Max  conseq  Losers] = @Original" +
                "_Max__conseq__Losers)) AND ((@IsNull_Largest_Winning_Trade = 1 AND [Largest Winn" +
                "ing Trade] IS NULL) OR ([Largest Winning Trade] = @Original_Largest_Winning_Trad" +
                "e)) AND ((@IsNull_Largest_Losing_Trade = 1 AND [Largest Losing Trade] IS NULL) O" +
                "R ([Largest Losing Trade] = @Original_Largest_Losing_Trade)) AND ((@IsNull_#_of_" +
                "Trades_per_Day = 1 AND [# of Trades per Day] IS NULL) OR ([# of Trades per Day] " +
                "= @Original_#_of_Trades_per_Day)) AND ((@IsNull_Avg__Time_in_Market = 1 AND [Avg" +
                "  Time in Market] IS NULL) OR ([Avg  Time in Market] = @Original_Avg__Time_in_Ma" +
                "rket)) AND ((@IsNull_Profit_per_Month = 1 AND [Profit per Month] IS NULL) OR ([P" +
                "rofit per Month] = @Original_Profit_per_Month)) AND ((@IsNull_Max__Time_to_Recov" +
                "er = 1 AND [Max  Time to Recover] IS NULL) OR ([Max  Time to Recover] = @Origina" +
                "l_Max__Time_to_Recover)) AND ((@IsNull_Average_MAE = 1 AND [Average MAE] IS NULL" +
                ") OR ([Average MAE] = @Original_Average_MAE)) AND ((@IsNull_Average_MFE = 1 AND " +
                "[Average MFE] IS NULL) OR ([Average MFE] = @Original_Average_MFE)) AND ((@IsNull" +
                "_Average_ETD = 1 AND [Average ETD] IS NULL) OR ([Average ETD] = @Original_Averag" +
                "e_ETD)) AND ((@IsNull_CreateDate = 1 AND [CreateDate] IS NULL) OR ([CreateDate] " +
                "= @Original_CreateDate)) AND ((@IsNull_ModifyDate = 1 AND [ModifyDate] IS NULL) " +
                "OR ([ModifyDate] = @Original_ModifyDate)));\r\nSELECT Instrument, Performance, Per" +
                "iod, _OB, _OS, _OscLength, _TrendLength, MarketOrders, Reverse, StopLongTicks, S" +
                "topShortTicks, TargetLongTicks, TargetShortTicks, TimeBegin, TimeEnd, [Total Net" +
                " Profit], [Gross Profit], [Gross Loss], [Profit Factor], [Cumulative Profit], [M" +
                "ax Drawdown], [Sharpe Ratio], Commission, [Total # of Trades], [Percent Profitab" +
                "le], [# of Winning Trades], [# of Losing Trades], [Average Trade], [Average Winn" +
                "ing Trade], [Average Losing Trade], [Ratio avg  Win   avg  Loss], [Max  conseq  " +
                "Winners], [Max  conseq  Losers], [Largest Winning Trade], [Largest Losing Trade]" +
                ", [# of Trades per Day], [Avg  Time in Market], [Profit per Month], [Max  Time t" +
                "o Recover], [Average MAE], [Average MFE], [Average ETD], CreateDate, ModifyDate " +
                "FROM PIPrecisionEntry.StrategyParametersPerformance WHERE (Instrument = @Instrum" +
                "ent)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Instrument", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Instrument", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Performance", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Performance", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Period", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Period", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@_OB", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "_OB", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@_OS", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "_OS", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@_OscLength", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "_OscLength", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@_TrendLength", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "_TrendLength", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MarketOrders", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MarketOrders", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Reverse", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Reverse", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@StopLongTicks", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StopLongTicks", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@StopShortTicks", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StopShortTicks", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TargetLongTicks", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TargetLongTicks", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TargetShortTicks", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TargetShortTicks", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TimeBegin", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TimeBegin", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TimeEnd", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TimeEnd", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Total_Net_Profit", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Total Net Profit", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Gross_Profit", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Gross Profit", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Gross_Loss", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Gross Loss", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Profit_Factor", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Profit Factor", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Cumulative_Profit", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Cumulative Profit", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Max_Drawdown", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Max Drawdown", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Sharpe_Ratio", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Sharpe Ratio", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Commission", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Commission", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Total_#_of_Trades", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Total # of Trades", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Percent_Profitable", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Percent Profitable", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@#_of_Winning_Trades", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "# of Winning Trades", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@#_of_Losing_Trades", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "# of Losing Trades", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Average_Trade", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Average Trade", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Average_Winning_Trade", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Average Winning Trade", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Average_Losing_Trade", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Average Losing Trade", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Ratio_avg__Win___avg__Loss", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Ratio avg  Win   avg  Loss", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Max__conseq__Winners", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Max  conseq  Winners", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Max__conseq__Losers", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Max  conseq  Losers", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Largest_Winning_Trade", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Largest Winning Trade", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Largest_Losing_Trade", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Largest Losing Trade", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@#_of_Trades_per_Day", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "# of Trades per Day", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Avg__Time_in_Market", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Avg  Time in Market", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Profit_per_Month", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Profit per Month", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Max__Time_to_Recover", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Max  Time to Recover", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Average_MAE", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Average MAE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Average_MFE", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Average MFE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Average_ETD", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Average ETD", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CreateDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CreateDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ModifyDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ModifyDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Instrument", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Instrument", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Performance", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Performance", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Performance", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Performance", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Period", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Period", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Period", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Period", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull__OB", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "_OB", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original__OB", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "_OB", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull__OS", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "_OS", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original__OS", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "_OS", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull__OscLength", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "_OscLength", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original__OscLength", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "_OscLength", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull__TrendLength", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "_TrendLength", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original__TrendLength", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "_TrendLength", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_MarketOrders", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MarketOrders", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MarketOrders", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MarketOrders", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Reverse", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Reverse", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Reverse", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Reverse", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_StopLongTicks", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StopLongTicks", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_StopLongTicks", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StopLongTicks", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_StopShortTicks", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StopShortTicks", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_StopShortTicks", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StopShortTicks", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_TargetLongTicks", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TargetLongTicks", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TargetLongTicks", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TargetLongTicks", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_TargetShortTicks", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TargetShortTicks", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TargetShortTicks", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TargetShortTicks", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_TimeBegin", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TimeBegin", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TimeBegin", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TimeBegin", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_TimeEnd", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TimeEnd", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TimeEnd", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TimeEnd", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Total_Net_Profit", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Total Net Profit", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Total_Net_Profit", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Total Net Profit", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Gross_Profit", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Gross Profit", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Gross_Profit", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Gross Profit", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Gross_Loss", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Gross Loss", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Gross_Loss", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Gross Loss", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Profit_Factor", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Profit Factor", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Profit_Factor", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Profit Factor", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Cumulative_Profit", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Cumulative Profit", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Cumulative_Profit", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Cumulative Profit", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Max_Drawdown", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Max Drawdown", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Max_Drawdown", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Max Drawdown", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Sharpe_Ratio", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Sharpe Ratio", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Sharpe_Ratio", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Sharpe Ratio", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Commission", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Commission", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Commission", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Commission", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Total_#_of_Trades", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Total # of Trades", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Total_#_of_Trades", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Total # of Trades", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Percent_Profitable", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Percent Profitable", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Percent_Profitable", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Percent Profitable", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_#_of_Winning_Trades", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "# of Winning Trades", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_#_of_Winning_Trades", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "# of Winning Trades", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_#_of_Losing_Trades", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "# of Losing Trades", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_#_of_Losing_Trades", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "# of Losing Trades", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Average_Trade", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Average Trade", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Average_Trade", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Average Trade", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Average_Winning_Trade", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Average Winning Trade", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Average_Winning_Trade", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Average Winning Trade", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Average_Losing_Trade", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Average Losing Trade", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Average_Losing_Trade", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Average Losing Trade", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Ratio_avg__Win___avg__Loss", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Ratio avg  Win   avg  Loss", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Ratio_avg__Win___avg__Loss", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Ratio avg  Win   avg  Loss", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Max__conseq__Winners", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Max  conseq  Winners", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Max__conseq__Winners", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Max  conseq  Winners", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Max__conseq__Losers", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Max  conseq  Losers", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Max__conseq__Losers", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Max  conseq  Losers", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Largest_Winning_Trade", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Largest Winning Trade", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Largest_Winning_Trade", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Largest Winning Trade", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Largest_Losing_Trade", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Largest Losing Trade", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Largest_Losing_Trade", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Largest Losing Trade", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_#_of_Trades_per_Day", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "# of Trades per Day", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_#_of_Trades_per_Day", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "# of Trades per Day", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Avg__Time_in_Market", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Avg  Time in Market", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Avg__Time_in_Market", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Avg  Time in Market", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Profit_per_Month", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Profit per Month", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Profit_per_Month", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Profit per Month", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Max__Time_to_Recover", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Max  Time to Recover", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Max__Time_to_Recover", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Max  Time to Recover", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Average_MAE", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Average MAE", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Average_MAE", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Average MAE", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Average_MFE", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Average MFE", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Average_MFE", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Average MFE", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Average_ETD", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Average ETD", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Average_ETD", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Average ETD", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_CreateDate", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CreateDate", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CreateDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CreateDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ModifyDate", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ModifyDate", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ModifyDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ModifyDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::EGIControlButtonsv1.Properties.Settings.Default.EFundConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT Instrument, Performance, Period, [_OB], [_OS], [_OscLength], [_TrendLength], MarketOrders, Reverse, StopLongTicks, StopShortTicks, TargetLongTicks, TargetShortTicks, TimeBegin, TimeEnd, [Total Net Profit], [Gross Profit], [Gross Loss], [Profit Factor], [Cumulative Profit], [Max Drawdown], [Sharpe Ratio], Commission, [Total # of Trades], [Percent Profitable], [# of Winning Trades], [# of Losing Trades], [Average Trade], [Average Winning Trade], [Average Losing Trade], [Ratio avg  Win   avg  Loss], [Max  conseq  Winners], [Max  conseq  Losers], [Largest Winning Trade], [Largest Losing Trade], [# of Trades per Day], [Avg  Time in Market], [Profit per Month], [Max  Time to Recover], [Average MAE], [Average MFE], [Average ETD], CreateDate, ModifyDate FROM PIPrecisionEntry.StrategyParametersPerformance";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(EFundDataSet.StrategyParametersPerformanceDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual EFundDataSet.StrategyParametersPerformanceDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            EFundDataSet.StrategyParametersPerformanceDataTable dataTable = new EFundDataSet.StrategyParametersPerformanceDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(EFundDataSet.StrategyParametersPerformanceDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(EFundDataSet dataSet) {
            return this.Adapter.Update(dataSet, "StrategyParametersPerformance");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(
                    string Original_Instrument, 
                    global::System.Nullable<float> Original_Performance, 
                    global::System.Nullable<short> Original_Period, 
                    global::System.Nullable<float> Original__OB, 
                    global::System.Nullable<float> Original__OS, 
                    global::System.Nullable<short> Original__OscLength, 
                    global::System.Nullable<short> Original__TrendLength, 
                    global::System.Nullable<bool> Original_MarketOrders, 
                    global::System.Nullable<bool> Original_Reverse, 
                    global::System.Nullable<short> Original_StopLongTicks, 
                    global::System.Nullable<short> Original_StopShortTicks, 
                    global::System.Nullable<short> Original_TargetLongTicks, 
                    global::System.Nullable<short> Original_TargetShortTicks, 
                    global::System.Nullable<int> Original_TimeBegin, 
                    global::System.Nullable<int> Original_TimeEnd, 
                    global::System.Nullable<float> Original_Total_Net_Profit, 
                    global::System.Nullable<float> Original_Gross_Profit, 
                    global::System.Nullable<float> Original_Gross_Loss, 
                    global::System.Nullable<float> Original_Profit_Factor, 
                    global::System.Nullable<float> Original_Cumulative_Profit, 
                    global::System.Nullable<short> Original_Max_Drawdown, 
                    global::System.Nullable<short> Original_Sharpe_Ratio, 
                    global::System.Nullable<short> Original_Commission, 
                    global::System.Nullable<short> _Original_Total___of_Trades, 
                    global::System.Nullable<float> Original_Percent_Profitable, 
                    global::System.Nullable<short> _Original___of_Winning_Trades, 
                    global::System.Nullable<short> _Original___of_Losing_Trades, 
                    global::System.Nullable<float> Original_Average_Trade, 
                    global::System.Nullable<float> Original_Average_Winning_Trade, 
                    global::System.Nullable<float> Original_Average_Losing_Trade, 
                    global::System.Nullable<float> Original_Ratio_avg__Win___avg__Loss, 
                    global::System.Nullable<short> Original_Max__conseq__Winners, 
                    global::System.Nullable<short> Original_Max__conseq__Losers, 
                    global::System.Nullable<float> Original_Largest_Winning_Trade, 
                    global::System.Nullable<float> Original_Largest_Losing_Trade, 
                    global::System.Nullable<short> _Original___of_Trades_per_Day, 
                    string Original_Avg__Time_in_Market, 
                    global::System.Nullable<float> Original_Profit_per_Month, 
                    global::System.Nullable<float> Original_Max__Time_to_Recover, 
                    global::System.Nullable<float> Original_Average_MAE, 
                    global::System.Nullable<float> Original_Average_MFE, 
                    global::System.Nullable<float> Original_Average_ETD, 
                    global::System.Nullable<global::System.DateTime> Original_CreateDate, 
                    global::System.Nullable<global::System.DateTime> Original_ModifyDate) {
            if ((Original_Instrument == null)) {
                throw new global::System.ArgumentNullException("Original_Instrument");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_Instrument));
            }
            if ((Original_Performance.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((float)(Original_Performance.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((Original_Period.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((short)(Original_Period.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((Original__OB.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((float)(Original__OB.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((Original__OS.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((float)(Original__OS.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((Original__OscLength.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[10].Value = ((short)(Original__OscLength.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((Original__TrendLength.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[12].Value = ((short)(Original__TrendLength.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((Original_MarketOrders.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[14].Value = ((bool)(Original_MarketOrders.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((Original_Reverse.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[16].Value = ((bool)(Original_Reverse.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            if ((Original_StopLongTicks.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[18].Value = ((short)(Original_StopLongTicks.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            if ((Original_StopShortTicks.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[20].Value = ((short)(Original_StopShortTicks.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            if ((Original_TargetLongTicks.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[22].Value = ((short)(Original_TargetLongTicks.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            if ((Original_TargetShortTicks.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[23].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[24].Value = ((short)(Original_TargetShortTicks.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[23].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            if ((Original_TimeBegin.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[25].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[26].Value = ((int)(Original_TimeBegin.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[25].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            if ((Original_TimeEnd.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[27].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[28].Value = ((int)(Original_TimeEnd.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[27].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[28].Value = global::System.DBNull.Value;
            }
            if ((Original_Total_Net_Profit.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[29].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[30].Value = ((float)(Original_Total_Net_Profit.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[29].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[30].Value = global::System.DBNull.Value;
            }
            if ((Original_Gross_Profit.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[31].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[32].Value = ((float)(Original_Gross_Profit.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[31].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[32].Value = global::System.DBNull.Value;
            }
            if ((Original_Gross_Loss.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[33].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[34].Value = ((float)(Original_Gross_Loss.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[33].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[34].Value = global::System.DBNull.Value;
            }
            if ((Original_Profit_Factor.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[35].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[36].Value = ((float)(Original_Profit_Factor.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[35].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[36].Value = global::System.DBNull.Value;
            }
            if ((Original_Cumulative_Profit.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[37].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[38].Value = ((float)(Original_Cumulative_Profit.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[37].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[38].Value = global::System.DBNull.Value;
            }
            if ((Original_Max_Drawdown.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[39].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[40].Value = ((short)(Original_Max_Drawdown.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[39].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[40].Value = global::System.DBNull.Value;
            }
            if ((Original_Sharpe_Ratio.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[41].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[42].Value = ((short)(Original_Sharpe_Ratio.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[41].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[42].Value = global::System.DBNull.Value;
            }
            if ((Original_Commission.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[43].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[44].Value = ((short)(Original_Commission.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[43].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[44].Value = global::System.DBNull.Value;
            }
            if ((_Original_Total___of_Trades.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[45].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[46].Value = ((short)(_Original_Total___of_Trades.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[45].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[46].Value = global::System.DBNull.Value;
            }
            if ((Original_Percent_Profitable.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[47].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[48].Value = ((float)(Original_Percent_Profitable.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[47].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[48].Value = global::System.DBNull.Value;
            }
            if ((_Original___of_Winning_Trades.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[49].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[50].Value = ((short)(_Original___of_Winning_Trades.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[49].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[50].Value = global::System.DBNull.Value;
            }
            if ((_Original___of_Losing_Trades.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[51].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[52].Value = ((short)(_Original___of_Losing_Trades.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[51].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[52].Value = global::System.DBNull.Value;
            }
            if ((Original_Average_Trade.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[53].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[54].Value = ((float)(Original_Average_Trade.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[53].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[54].Value = global::System.DBNull.Value;
            }
            if ((Original_Average_Winning_Trade.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[55].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[56].Value = ((float)(Original_Average_Winning_Trade.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[55].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[56].Value = global::System.DBNull.Value;
            }
            if ((Original_Average_Losing_Trade.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[57].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[58].Value = ((float)(Original_Average_Losing_Trade.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[57].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[58].Value = global::System.DBNull.Value;
            }
            if ((Original_Ratio_avg__Win___avg__Loss.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[59].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[60].Value = ((float)(Original_Ratio_avg__Win___avg__Loss.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[59].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[60].Value = global::System.DBNull.Value;
            }
            if ((Original_Max__conseq__Winners.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[61].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[62].Value = ((short)(Original_Max__conseq__Winners.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[61].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[62].Value = global::System.DBNull.Value;
            }
            if ((Original_Max__conseq__Losers.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[63].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[64].Value = ((short)(Original_Max__conseq__Losers.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[63].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[64].Value = global::System.DBNull.Value;
            }
            if ((Original_Largest_Winning_Trade.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[65].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[66].Value = ((float)(Original_Largest_Winning_Trade.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[65].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[66].Value = global::System.DBNull.Value;
            }
            if ((Original_Largest_Losing_Trade.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[67].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[68].Value = ((float)(Original_Largest_Losing_Trade.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[67].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[68].Value = global::System.DBNull.Value;
            }
            if ((_Original___of_Trades_per_Day.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[69].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[70].Value = ((short)(_Original___of_Trades_per_Day.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[69].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[70].Value = global::System.DBNull.Value;
            }
            if ((Original_Avg__Time_in_Market == null)) {
                this.Adapter.DeleteCommand.Parameters[71].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[72].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[71].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[72].Value = ((string)(Original_Avg__Time_in_Market));
            }
            if ((Original_Profit_per_Month.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[73].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[74].Value = ((float)(Original_Profit_per_Month.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[73].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[74].Value = global::System.DBNull.Value;
            }
            if ((Original_Max__Time_to_Recover.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[75].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[76].Value = ((float)(Original_Max__Time_to_Recover.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[75].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[76].Value = global::System.DBNull.Value;
            }
            if ((Original_Average_MAE.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[77].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[78].Value = ((float)(Original_Average_MAE.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[77].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[78].Value = global::System.DBNull.Value;
            }
            if ((Original_Average_MFE.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[79].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[80].Value = ((float)(Original_Average_MFE.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[79].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[80].Value = global::System.DBNull.Value;
            }
            if ((Original_Average_ETD.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[81].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[82].Value = ((float)(Original_Average_ETD.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[81].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[82].Value = global::System.DBNull.Value;
            }
            if ((Original_CreateDate.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[83].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[84].Value = ((System.DateTime)(Original_CreateDate.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[83].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[84].Value = global::System.DBNull.Value;
            }
            if ((Original_ModifyDate.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[85].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[86].Value = ((System.DateTime)(Original_ModifyDate.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[85].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[86].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    string Instrument, 
                    global::System.Nullable<float> Performance, 
                    global::System.Nullable<short> Period, 
                    global::System.Nullable<float> _OB, 
                    global::System.Nullable<float> _OS, 
                    global::System.Nullable<short> _OscLength, 
                    global::System.Nullable<short> _TrendLength, 
                    global::System.Nullable<bool> MarketOrders, 
                    global::System.Nullable<bool> Reverse, 
                    global::System.Nullable<short> StopLongTicks, 
                    global::System.Nullable<short> StopShortTicks, 
                    global::System.Nullable<short> TargetLongTicks, 
                    global::System.Nullable<short> TargetShortTicks, 
                    global::System.Nullable<int> TimeBegin, 
                    global::System.Nullable<int> TimeEnd, 
                    global::System.Nullable<float> Total_Net_Profit, 
                    global::System.Nullable<float> Gross_Profit, 
                    global::System.Nullable<float> Gross_Loss, 
                    global::System.Nullable<float> Profit_Factor, 
                    global::System.Nullable<float> Cumulative_Profit, 
                    global::System.Nullable<short> Max_Drawdown, 
                    global::System.Nullable<short> Sharpe_Ratio, 
                    global::System.Nullable<short> Commission, 
                    global::System.Nullable<short> _Total___of_Trades, 
                    global::System.Nullable<float> Percent_Profitable, 
                    global::System.Nullable<short> ___of_Winning_Trades, 
                    global::System.Nullable<short> ___of_Losing_Trades, 
                    global::System.Nullable<float> Average_Trade, 
                    global::System.Nullable<float> Average_Winning_Trade, 
                    global::System.Nullable<float> Average_Losing_Trade, 
                    global::System.Nullable<float> Ratio_avg__Win___avg__Loss, 
                    global::System.Nullable<short> Max__conseq__Winners, 
                    global::System.Nullable<short> Max__conseq__Losers, 
                    global::System.Nullable<float> Largest_Winning_Trade, 
                    global::System.Nullable<float> Largest_Losing_Trade, 
                    global::System.Nullable<short> ___of_Trades_per_Day, 
                    string Avg__Time_in_Market, 
                    global::System.Nullable<float> Profit_per_Month, 
                    global::System.Nullable<float> Max__Time_to_Recover, 
                    global::System.Nullable<float> Average_MAE, 
                    global::System.Nullable<float> Average_MFE, 
                    global::System.Nullable<float> Average_ETD, 
                    global::System.Nullable<global::System.DateTime> CreateDate, 
                    global::System.Nullable<global::System.DateTime> ModifyDate) {
            if ((Instrument == null)) {
                throw new global::System.ArgumentNullException("Instrument");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(Instrument));
            }
            if ((Performance.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((float)(Performance.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((Period.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((short)(Period.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((_OB.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((float)(_OB.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((_OS.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((float)(_OS.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((_OscLength.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((short)(_OscLength.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((_TrendLength.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((short)(_TrendLength.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((MarketOrders.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((bool)(MarketOrders.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((Reverse.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[8].Value = ((bool)(Reverse.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((StopLongTicks.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[9].Value = ((short)(StopLongTicks.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((StopShortTicks.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[10].Value = ((short)(StopShortTicks.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((TargetLongTicks.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[11].Value = ((short)(TargetLongTicks.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((TargetShortTicks.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[12].Value = ((short)(TargetShortTicks.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((TimeBegin.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[13].Value = ((int)(TimeBegin.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((TimeEnd.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[14].Value = ((int)(TimeEnd.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((Total_Net_Profit.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[15].Value = ((float)(Total_Net_Profit.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            if ((Gross_Profit.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[16].Value = ((float)(Gross_Profit.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            if ((Gross_Loss.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[17].Value = ((float)(Gross_Loss.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            if ((Profit_Factor.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[18].Value = ((float)(Profit_Factor.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            if ((Cumulative_Profit.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[19].Value = ((float)(Cumulative_Profit.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            if ((Max_Drawdown.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[20].Value = ((short)(Max_Drawdown.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            if ((Sharpe_Ratio.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[21].Value = ((short)(Sharpe_Ratio.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            if ((Commission.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[22].Value = ((short)(Commission.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            if ((_Total___of_Trades.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[23].Value = ((short)(_Total___of_Trades.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            if ((Percent_Profitable.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[24].Value = ((float)(Percent_Profitable.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            if ((___of_Winning_Trades.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[25].Value = ((short)(___of_Winning_Trades.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[25].Value = global::System.DBNull.Value;
            }
            if ((___of_Losing_Trades.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[26].Value = ((short)(___of_Losing_Trades.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            if ((Average_Trade.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[27].Value = ((float)(Average_Trade.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[27].Value = global::System.DBNull.Value;
            }
            if ((Average_Winning_Trade.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[28].Value = ((float)(Average_Winning_Trade.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[28].Value = global::System.DBNull.Value;
            }
            if ((Average_Losing_Trade.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[29].Value = ((float)(Average_Losing_Trade.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[29].Value = global::System.DBNull.Value;
            }
            if ((Ratio_avg__Win___avg__Loss.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[30].Value = ((float)(Ratio_avg__Win___avg__Loss.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[30].Value = global::System.DBNull.Value;
            }
            if ((Max__conseq__Winners.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[31].Value = ((short)(Max__conseq__Winners.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[31].Value = global::System.DBNull.Value;
            }
            if ((Max__conseq__Losers.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[32].Value = ((short)(Max__conseq__Losers.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[32].Value = global::System.DBNull.Value;
            }
            if ((Largest_Winning_Trade.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[33].Value = ((float)(Largest_Winning_Trade.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[33].Value = global::System.DBNull.Value;
            }
            if ((Largest_Losing_Trade.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[34].Value = ((float)(Largest_Losing_Trade.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[34].Value = global::System.DBNull.Value;
            }
            if ((___of_Trades_per_Day.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[35].Value = ((short)(___of_Trades_per_Day.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[35].Value = global::System.DBNull.Value;
            }
            if ((Avg__Time_in_Market == null)) {
                this.Adapter.InsertCommand.Parameters[36].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[36].Value = ((string)(Avg__Time_in_Market));
            }
            if ((Profit_per_Month.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[37].Value = ((float)(Profit_per_Month.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[37].Value = global::System.DBNull.Value;
            }
            if ((Max__Time_to_Recover.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[38].Value = ((float)(Max__Time_to_Recover.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[38].Value = global::System.DBNull.Value;
            }
            if ((Average_MAE.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[39].Value = ((float)(Average_MAE.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[39].Value = global::System.DBNull.Value;
            }
            if ((Average_MFE.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[40].Value = ((float)(Average_MFE.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[40].Value = global::System.DBNull.Value;
            }
            if ((Average_ETD.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[41].Value = ((float)(Average_ETD.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[41].Value = global::System.DBNull.Value;
            }
            if ((CreateDate.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[42].Value = ((System.DateTime)(CreateDate.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[42].Value = global::System.DBNull.Value;
            }
            if ((ModifyDate.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[43].Value = ((System.DateTime)(ModifyDate.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[43].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string Instrument, 
                    global::System.Nullable<float> Performance, 
                    global::System.Nullable<short> Period, 
                    global::System.Nullable<float> _OB, 
                    global::System.Nullable<float> _OS, 
                    global::System.Nullable<short> _OscLength, 
                    global::System.Nullable<short> _TrendLength, 
                    global::System.Nullable<bool> MarketOrders, 
                    global::System.Nullable<bool> Reverse, 
                    global::System.Nullable<short> StopLongTicks, 
                    global::System.Nullable<short> StopShortTicks, 
                    global::System.Nullable<short> TargetLongTicks, 
                    global::System.Nullable<short> TargetShortTicks, 
                    global::System.Nullable<int> TimeBegin, 
                    global::System.Nullable<int> TimeEnd, 
                    global::System.Nullable<float> Total_Net_Profit, 
                    global::System.Nullable<float> Gross_Profit, 
                    global::System.Nullable<float> Gross_Loss, 
                    global::System.Nullable<float> Profit_Factor, 
                    global::System.Nullable<float> Cumulative_Profit, 
                    global::System.Nullable<short> Max_Drawdown, 
                    global::System.Nullable<short> Sharpe_Ratio, 
                    global::System.Nullable<short> Commission, 
                    global::System.Nullable<short> _Total___of_Trades, 
                    global::System.Nullable<float> Percent_Profitable, 
                    global::System.Nullable<short> ___of_Winning_Trades, 
                    global::System.Nullable<short> ___of_Losing_Trades, 
                    global::System.Nullable<float> Average_Trade, 
                    global::System.Nullable<float> Average_Winning_Trade, 
                    global::System.Nullable<float> Average_Losing_Trade, 
                    global::System.Nullable<float> Ratio_avg__Win___avg__Loss, 
                    global::System.Nullable<short> Max__conseq__Winners, 
                    global::System.Nullable<short> Max__conseq__Losers, 
                    global::System.Nullable<float> Largest_Winning_Trade, 
                    global::System.Nullable<float> Largest_Losing_Trade, 
                    global::System.Nullable<short> ___of_Trades_per_Day, 
                    string Avg__Time_in_Market, 
                    global::System.Nullable<float> Profit_per_Month, 
                    global::System.Nullable<float> Max__Time_to_Recover, 
                    global::System.Nullable<float> Average_MAE, 
                    global::System.Nullable<float> Average_MFE, 
                    global::System.Nullable<float> Average_ETD, 
                    global::System.Nullable<global::System.DateTime> CreateDate, 
                    global::System.Nullable<global::System.DateTime> ModifyDate, 
                    string Original_Instrument, 
                    global::System.Nullable<float> Original_Performance, 
                    global::System.Nullable<short> Original_Period, 
                    global::System.Nullable<float> Original__OB, 
                    global::System.Nullable<float> Original__OS, 
                    global::System.Nullable<short> Original__OscLength, 
                    global::System.Nullable<short> Original__TrendLength, 
                    global::System.Nullable<bool> Original_MarketOrders, 
                    global::System.Nullable<bool> Original_Reverse, 
                    global::System.Nullable<short> Original_StopLongTicks, 
                    global::System.Nullable<short> Original_StopShortTicks, 
                    global::System.Nullable<short> Original_TargetLongTicks, 
                    global::System.Nullable<short> Original_TargetShortTicks, 
                    global::System.Nullable<int> Original_TimeBegin, 
                    global::System.Nullable<int> Original_TimeEnd, 
                    global::System.Nullable<float> Original_Total_Net_Profit, 
                    global::System.Nullable<float> Original_Gross_Profit, 
                    global::System.Nullable<float> Original_Gross_Loss, 
                    global::System.Nullable<float> Original_Profit_Factor, 
                    global::System.Nullable<float> Original_Cumulative_Profit, 
                    global::System.Nullable<short> Original_Max_Drawdown, 
                    global::System.Nullable<short> Original_Sharpe_Ratio, 
                    global::System.Nullable<short> Original_Commission, 
                    global::System.Nullable<short> _Original_Total___of_Trades, 
                    global::System.Nullable<float> Original_Percent_Profitable, 
                    global::System.Nullable<short> _Original___of_Winning_Trades, 
                    global::System.Nullable<short> _Original___of_Losing_Trades, 
                    global::System.Nullable<float> Original_Average_Trade, 
                    global::System.Nullable<float> Original_Average_Winning_Trade, 
                    global::System.Nullable<float> Original_Average_Losing_Trade, 
                    global::System.Nullable<float> Original_Ratio_avg__Win___avg__Loss, 
                    global::System.Nullable<short> Original_Max__conseq__Winners, 
                    global::System.Nullable<short> Original_Max__conseq__Losers, 
                    global::System.Nullable<float> Original_Largest_Winning_Trade, 
                    global::System.Nullable<float> Original_Largest_Losing_Trade, 
                    global::System.Nullable<short> _Original___of_Trades_per_Day, 
                    string Original_Avg__Time_in_Market, 
                    global::System.Nullable<float> Original_Profit_per_Month, 
                    global::System.Nullable<float> Original_Max__Time_to_Recover, 
                    global::System.Nullable<float> Original_Average_MAE, 
                    global::System.Nullable<float> Original_Average_MFE, 
                    global::System.Nullable<float> Original_Average_ETD, 
                    global::System.Nullable<global::System.DateTime> Original_CreateDate, 
                    global::System.Nullable<global::System.DateTime> Original_ModifyDate) {
            if ((Instrument == null)) {
                throw new global::System.ArgumentNullException("Instrument");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(Instrument));
            }
            if ((Performance.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((float)(Performance.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((Period.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((short)(Period.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((_OB.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((float)(_OB.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((_OS.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((float)(_OS.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((_OscLength.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((short)(_OscLength.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((_TrendLength.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((short)(_TrendLength.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((MarketOrders.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((bool)(MarketOrders.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((Reverse.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((bool)(Reverse.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((StopLongTicks.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((short)(StopLongTicks.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((StopShortTicks.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((short)(StopShortTicks.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((TargetLongTicks.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((short)(TargetLongTicks.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((TargetShortTicks.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((short)(TargetShortTicks.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((TimeBegin.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((int)(TimeBegin.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((TimeEnd.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((int)(TimeEnd.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((Total_Net_Profit.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((float)(Total_Net_Profit.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            if ((Gross_Profit.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((float)(Gross_Profit.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            if ((Gross_Loss.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((float)(Gross_Loss.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            if ((Profit_Factor.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((float)(Profit_Factor.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            if ((Cumulative_Profit.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((float)(Cumulative_Profit.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            if ((Max_Drawdown.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((short)(Max_Drawdown.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            if ((Sharpe_Ratio.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((short)(Sharpe_Ratio.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            if ((Commission.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((short)(Commission.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            if ((_Total___of_Trades.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((short)(_Total___of_Trades.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            if ((Percent_Profitable.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((float)(Percent_Profitable.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            if ((___of_Winning_Trades.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((short)(___of_Winning_Trades.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[25].Value = global::System.DBNull.Value;
            }
            if ((___of_Losing_Trades.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[26].Value = ((short)(___of_Losing_Trades.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            if ((Average_Trade.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[27].Value = ((float)(Average_Trade.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[27].Value = global::System.DBNull.Value;
            }
            if ((Average_Winning_Trade.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[28].Value = ((float)(Average_Winning_Trade.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[28].Value = global::System.DBNull.Value;
            }
            if ((Average_Losing_Trade.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[29].Value = ((float)(Average_Losing_Trade.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[29].Value = global::System.DBNull.Value;
            }
            if ((Ratio_avg__Win___avg__Loss.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[30].Value = ((float)(Ratio_avg__Win___avg__Loss.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[30].Value = global::System.DBNull.Value;
            }
            if ((Max__conseq__Winners.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[31].Value = ((short)(Max__conseq__Winners.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[31].Value = global::System.DBNull.Value;
            }
            if ((Max__conseq__Losers.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[32].Value = ((short)(Max__conseq__Losers.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[32].Value = global::System.DBNull.Value;
            }
            if ((Largest_Winning_Trade.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[33].Value = ((float)(Largest_Winning_Trade.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[33].Value = global::System.DBNull.Value;
            }
            if ((Largest_Losing_Trade.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[34].Value = ((float)(Largest_Losing_Trade.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[34].Value = global::System.DBNull.Value;
            }
            if ((___of_Trades_per_Day.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[35].Value = ((short)(___of_Trades_per_Day.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[35].Value = global::System.DBNull.Value;
            }
            if ((Avg__Time_in_Market == null)) {
                this.Adapter.UpdateCommand.Parameters[36].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[36].Value = ((string)(Avg__Time_in_Market));
            }
            if ((Profit_per_Month.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[37].Value = ((float)(Profit_per_Month.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[37].Value = global::System.DBNull.Value;
            }
            if ((Max__Time_to_Recover.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[38].Value = ((float)(Max__Time_to_Recover.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[38].Value = global::System.DBNull.Value;
            }
            if ((Average_MAE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[39].Value = ((float)(Average_MAE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[39].Value = global::System.DBNull.Value;
            }
            if ((Average_MFE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[40].Value = ((float)(Average_MFE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[40].Value = global::System.DBNull.Value;
            }
            if ((Average_ETD.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[41].Value = ((float)(Average_ETD.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[41].Value = global::System.DBNull.Value;
            }
            if ((CreateDate.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[42].Value = ((System.DateTime)(CreateDate.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[42].Value = global::System.DBNull.Value;
            }
            if ((ModifyDate.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[43].Value = ((System.DateTime)(ModifyDate.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[43].Value = global::System.DBNull.Value;
            }
            if ((Original_Instrument == null)) {
                throw new global::System.ArgumentNullException("Original_Instrument");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[44].Value = ((string)(Original_Instrument));
            }
            if ((Original_Performance.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[45].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[46].Value = ((float)(Original_Performance.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[45].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[46].Value = global::System.DBNull.Value;
            }
            if ((Original_Period.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[47].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[48].Value = ((short)(Original_Period.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[47].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[48].Value = global::System.DBNull.Value;
            }
            if ((Original__OB.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[49].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[50].Value = ((float)(Original__OB.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[49].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[50].Value = global::System.DBNull.Value;
            }
            if ((Original__OS.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[51].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[52].Value = ((float)(Original__OS.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[51].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[52].Value = global::System.DBNull.Value;
            }
            if ((Original__OscLength.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[53].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[54].Value = ((short)(Original__OscLength.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[53].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[54].Value = global::System.DBNull.Value;
            }
            if ((Original__TrendLength.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[55].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[56].Value = ((short)(Original__TrendLength.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[55].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[56].Value = global::System.DBNull.Value;
            }
            if ((Original_MarketOrders.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[57].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[58].Value = ((bool)(Original_MarketOrders.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[57].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[58].Value = global::System.DBNull.Value;
            }
            if ((Original_Reverse.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[59].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[60].Value = ((bool)(Original_Reverse.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[59].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[60].Value = global::System.DBNull.Value;
            }
            if ((Original_StopLongTicks.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[61].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[62].Value = ((short)(Original_StopLongTicks.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[61].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[62].Value = global::System.DBNull.Value;
            }
            if ((Original_StopShortTicks.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[63].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[64].Value = ((short)(Original_StopShortTicks.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[63].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[64].Value = global::System.DBNull.Value;
            }
            if ((Original_TargetLongTicks.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[65].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[66].Value = ((short)(Original_TargetLongTicks.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[65].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[66].Value = global::System.DBNull.Value;
            }
            if ((Original_TargetShortTicks.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[67].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[68].Value = ((short)(Original_TargetShortTicks.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[67].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[68].Value = global::System.DBNull.Value;
            }
            if ((Original_TimeBegin.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[69].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[70].Value = ((int)(Original_TimeBegin.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[69].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[70].Value = global::System.DBNull.Value;
            }
            if ((Original_TimeEnd.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[71].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[72].Value = ((int)(Original_TimeEnd.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[71].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[72].Value = global::System.DBNull.Value;
            }
            if ((Original_Total_Net_Profit.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[73].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[74].Value = ((float)(Original_Total_Net_Profit.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[73].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[74].Value = global::System.DBNull.Value;
            }
            if ((Original_Gross_Profit.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[75].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[76].Value = ((float)(Original_Gross_Profit.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[75].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[76].Value = global::System.DBNull.Value;
            }
            if ((Original_Gross_Loss.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[77].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[78].Value = ((float)(Original_Gross_Loss.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[77].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[78].Value = global::System.DBNull.Value;
            }
            if ((Original_Profit_Factor.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[79].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[80].Value = ((float)(Original_Profit_Factor.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[79].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[80].Value = global::System.DBNull.Value;
            }
            if ((Original_Cumulative_Profit.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[81].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[82].Value = ((float)(Original_Cumulative_Profit.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[81].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[82].Value = global::System.DBNull.Value;
            }
            if ((Original_Max_Drawdown.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[83].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[84].Value = ((short)(Original_Max_Drawdown.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[83].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[84].Value = global::System.DBNull.Value;
            }
            if ((Original_Sharpe_Ratio.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[85].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[86].Value = ((short)(Original_Sharpe_Ratio.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[85].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[86].Value = global::System.DBNull.Value;
            }
            if ((Original_Commission.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[87].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[88].Value = ((short)(Original_Commission.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[87].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[88].Value = global::System.DBNull.Value;
            }
            if ((_Original_Total___of_Trades.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[89].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[90].Value = ((short)(_Original_Total___of_Trades.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[89].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[90].Value = global::System.DBNull.Value;
            }
            if ((Original_Percent_Profitable.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[91].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[92].Value = ((float)(Original_Percent_Profitable.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[91].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[92].Value = global::System.DBNull.Value;
            }
            if ((_Original___of_Winning_Trades.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[93].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[94].Value = ((short)(_Original___of_Winning_Trades.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[93].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[94].Value = global::System.DBNull.Value;
            }
            if ((_Original___of_Losing_Trades.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[95].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[96].Value = ((short)(_Original___of_Losing_Trades.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[95].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[96].Value = global::System.DBNull.Value;
            }
            if ((Original_Average_Trade.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[97].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[98].Value = ((float)(Original_Average_Trade.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[97].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[98].Value = global::System.DBNull.Value;
            }
            if ((Original_Average_Winning_Trade.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[99].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[100].Value = ((float)(Original_Average_Winning_Trade.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[99].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[100].Value = global::System.DBNull.Value;
            }
            if ((Original_Average_Losing_Trade.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[101].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[102].Value = ((float)(Original_Average_Losing_Trade.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[101].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[102].Value = global::System.DBNull.Value;
            }
            if ((Original_Ratio_avg__Win___avg__Loss.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[103].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[104].Value = ((float)(Original_Ratio_avg__Win___avg__Loss.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[103].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[104].Value = global::System.DBNull.Value;
            }
            if ((Original_Max__conseq__Winners.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[105].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[106].Value = ((short)(Original_Max__conseq__Winners.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[105].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[106].Value = global::System.DBNull.Value;
            }
            if ((Original_Max__conseq__Losers.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[107].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[108].Value = ((short)(Original_Max__conseq__Losers.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[107].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[108].Value = global::System.DBNull.Value;
            }
            if ((Original_Largest_Winning_Trade.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[109].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[110].Value = ((float)(Original_Largest_Winning_Trade.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[109].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[110].Value = global::System.DBNull.Value;
            }
            if ((Original_Largest_Losing_Trade.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[111].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[112].Value = ((float)(Original_Largest_Losing_Trade.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[111].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[112].Value = global::System.DBNull.Value;
            }
            if ((_Original___of_Trades_per_Day.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[113].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[114].Value = ((short)(_Original___of_Trades_per_Day.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[113].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[114].Value = global::System.DBNull.Value;
            }
            if ((Original_Avg__Time_in_Market == null)) {
                this.Adapter.UpdateCommand.Parameters[115].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[116].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[115].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[116].Value = ((string)(Original_Avg__Time_in_Market));
            }
            if ((Original_Profit_per_Month.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[117].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[118].Value = ((float)(Original_Profit_per_Month.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[117].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[118].Value = global::System.DBNull.Value;
            }
            if ((Original_Max__Time_to_Recover.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[119].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[120].Value = ((float)(Original_Max__Time_to_Recover.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[119].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[120].Value = global::System.DBNull.Value;
            }
            if ((Original_Average_MAE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[121].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[122].Value = ((float)(Original_Average_MAE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[121].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[122].Value = global::System.DBNull.Value;
            }
            if ((Original_Average_MFE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[123].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[124].Value = ((float)(Original_Average_MFE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[123].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[124].Value = global::System.DBNull.Value;
            }
            if ((Original_Average_ETD.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[125].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[126].Value = ((float)(Original_Average_ETD.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[125].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[126].Value = global::System.DBNull.Value;
            }
            if ((Original_CreateDate.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[127].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[128].Value = ((System.DateTime)(Original_CreateDate.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[127].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[128].Value = global::System.DBNull.Value;
            }
            if ((Original_ModifyDate.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[129].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[130].Value = ((System.DateTime)(Original_ModifyDate.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[129].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[130].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    global::System.Nullable<float> Performance, 
                    global::System.Nullable<short> Period, 
                    global::System.Nullable<float> _OB, 
                    global::System.Nullable<float> _OS, 
                    global::System.Nullable<short> _OscLength, 
                    global::System.Nullable<short> _TrendLength, 
                    global::System.Nullable<bool> MarketOrders, 
                    global::System.Nullable<bool> Reverse, 
                    global::System.Nullable<short> StopLongTicks, 
                    global::System.Nullable<short> StopShortTicks, 
                    global::System.Nullable<short> TargetLongTicks, 
                    global::System.Nullable<short> TargetShortTicks, 
                    global::System.Nullable<int> TimeBegin, 
                    global::System.Nullable<int> TimeEnd, 
                    global::System.Nullable<float> Total_Net_Profit, 
                    global::System.Nullable<float> Gross_Profit, 
                    global::System.Nullable<float> Gross_Loss, 
                    global::System.Nullable<float> Profit_Factor, 
                    global::System.Nullable<float> Cumulative_Profit, 
                    global::System.Nullable<short> Max_Drawdown, 
                    global::System.Nullable<short> Sharpe_Ratio, 
                    global::System.Nullable<short> Commission, 
                    global::System.Nullable<short> _Total___of_Trades, 
                    global::System.Nullable<float> Percent_Profitable, 
                    global::System.Nullable<short> ___of_Winning_Trades, 
                    global::System.Nullable<short> ___of_Losing_Trades, 
                    global::System.Nullable<float> Average_Trade, 
                    global::System.Nullable<float> Average_Winning_Trade, 
                    global::System.Nullable<float> Average_Losing_Trade, 
                    global::System.Nullable<float> Ratio_avg__Win___avg__Loss, 
                    global::System.Nullable<short> Max__conseq__Winners, 
                    global::System.Nullable<short> Max__conseq__Losers, 
                    global::System.Nullable<float> Largest_Winning_Trade, 
                    global::System.Nullable<float> Largest_Losing_Trade, 
                    global::System.Nullable<short> ___of_Trades_per_Day, 
                    string Avg__Time_in_Market, 
                    global::System.Nullable<float> Profit_per_Month, 
                    global::System.Nullable<float> Max__Time_to_Recover, 
                    global::System.Nullable<float> Average_MAE, 
                    global::System.Nullable<float> Average_MFE, 
                    global::System.Nullable<float> Average_ETD, 
                    global::System.Nullable<global::System.DateTime> CreateDate, 
                    global::System.Nullable<global::System.DateTime> ModifyDate, 
                    string Original_Instrument, 
                    global::System.Nullable<float> Original_Performance, 
                    global::System.Nullable<short> Original_Period, 
                    global::System.Nullable<float> Original__OB, 
                    global::System.Nullable<float> Original__OS, 
                    global::System.Nullable<short> Original__OscLength, 
                    global::System.Nullable<short> Original__TrendLength, 
                    global::System.Nullable<bool> Original_MarketOrders, 
                    global::System.Nullable<bool> Original_Reverse, 
                    global::System.Nullable<short> Original_StopLongTicks, 
                    global::System.Nullable<short> Original_StopShortTicks, 
                    global::System.Nullable<short> Original_TargetLongTicks, 
                    global::System.Nullable<short> Original_TargetShortTicks, 
                    global::System.Nullable<int> Original_TimeBegin, 
                    global::System.Nullable<int> Original_TimeEnd, 
                    global::System.Nullable<float> Original_Total_Net_Profit, 
                    global::System.Nullable<float> Original_Gross_Profit, 
                    global::System.Nullable<float> Original_Gross_Loss, 
                    global::System.Nullable<float> Original_Profit_Factor, 
                    global::System.Nullable<float> Original_Cumulative_Profit, 
                    global::System.Nullable<short> Original_Max_Drawdown, 
                    global::System.Nullable<short> Original_Sharpe_Ratio, 
                    global::System.Nullable<short> Original_Commission, 
                    global::System.Nullable<short> _Original_Total___of_Trades, 
                    global::System.Nullable<float> Original_Percent_Profitable, 
                    global::System.Nullable<short> _Original___of_Winning_Trades, 
                    global::System.Nullable<short> _Original___of_Losing_Trades, 
                    global::System.Nullable<float> Original_Average_Trade, 
                    global::System.Nullable<float> Original_Average_Winning_Trade, 
                    global::System.Nullable<float> Original_Average_Losing_Trade, 
                    global::System.Nullable<float> Original_Ratio_avg__Win___avg__Loss, 
                    global::System.Nullable<short> Original_Max__conseq__Winners, 
                    global::System.Nullable<short> Original_Max__conseq__Losers, 
                    global::System.Nullable<float> Original_Largest_Winning_Trade, 
                    global::System.Nullable<float> Original_Largest_Losing_Trade, 
                    global::System.Nullable<short> _Original___of_Trades_per_Day, 
                    string Original_Avg__Time_in_Market, 
                    global::System.Nullable<float> Original_Profit_per_Month, 
                    global::System.Nullable<float> Original_Max__Time_to_Recover, 
                    global::System.Nullable<float> Original_Average_MAE, 
                    global::System.Nullable<float> Original_Average_MFE, 
                    global::System.Nullable<float> Original_Average_ETD, 
                    global::System.Nullable<global::System.DateTime> Original_CreateDate, 
                    global::System.Nullable<global::System.DateTime> Original_ModifyDate) {
            return this.Update(Original_Instrument, Performance, Period, _OB, _OS, _OscLength, _TrendLength, MarketOrders, Reverse, StopLongTicks, StopShortTicks, TargetLongTicks, TargetShortTicks, TimeBegin, TimeEnd, Total_Net_Profit, Gross_Profit, Gross_Loss, Profit_Factor, Cumulative_Profit, Max_Drawdown, Sharpe_Ratio, Commission, _Total___of_Trades, Percent_Profitable, ___of_Winning_Trades, ___of_Losing_Trades, Average_Trade, Average_Winning_Trade, Average_Losing_Trade, Ratio_avg__Win___avg__Loss, Max__conseq__Winners, Max__conseq__Losers, Largest_Winning_Trade, Largest_Losing_Trade, ___of_Trades_per_Day, Avg__Time_in_Market, Profit_per_Month, Max__Time_to_Recover, Average_MAE, Average_MFE, Average_ETD, CreateDate, ModifyDate, Original_Instrument, Original_Performance, Original_Period, Original__OB, Original__OS, Original__OscLength, Original__TrendLength, Original_MarketOrders, Original_Reverse, Original_StopLongTicks, Original_StopShortTicks, Original_TargetLongTicks, Original_TargetShortTicks, Original_TimeBegin, Original_TimeEnd, Original_Total_Net_Profit, Original_Gross_Profit, Original_Gross_Loss, Original_Profit_Factor, Original_Cumulative_Profit, Original_Max_Drawdown, Original_Sharpe_Ratio, Original_Commission, _Original_Total___of_Trades, Original_Percent_Profitable, _Original___of_Winning_Trades, _Original___of_Losing_Trades, Original_Average_Trade, Original_Average_Winning_Trade, Original_Average_Losing_Trade, Original_Ratio_avg__Win___avg__Loss, Original_Max__conseq__Winners, Original_Max__conseq__Losers, Original_Largest_Winning_Trade, Original_Largest_Losing_Trade, _Original___of_Trades_per_Day, Original_Avg__Time_in_Market, Original_Profit_per_Month, Original_Max__Time_to_Recover, Original_Average_MAE, Original_Average_MFE, Original_Average_ETD, Original_CreateDate, Original_ModifyDate);
        }
    }
    
    /// <summary>
    ///TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" +
        "esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")]
    public partial class TableAdapterManager : global::System.ComponentModel.Component {
        
        private UpdateOrderOption _updateOrder;
        
        private StrategyParametersPerformanceTableAdapter _strategyParametersPerformanceTableAdapter;
        
        private bool _backupDataSetBeforeUpdate;
        
        private global::System.Data.IDbConnection _connection;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public UpdateOrderOption UpdateOrder {
            get {
                return this._updateOrder;
            }
            set {
                this._updateOrder = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public StrategyParametersPerformanceTableAdapter StrategyParametersPerformanceTableAdapter {
            get {
                return this._strategyParametersPerformanceTableAdapter;
            }
            set {
                this._strategyParametersPerformanceTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool BackupDataSetBeforeUpdate {
            get {
                return this._backupDataSetBeforeUpdate;
            }
            set {
                this._backupDataSetBeforeUpdate = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        public global::System.Data.IDbConnection Connection {
            get {
                if ((this._connection != null)) {
                    return this._connection;
                }
                if (((this._strategyParametersPerformanceTableAdapter != null) 
                            && (this._strategyParametersPerformanceTableAdapter.Connection != null))) {
                    return this._strategyParametersPerformanceTableAdapter.Connection;
                }
                return null;
            }
            set {
                this._connection = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        public int TableAdapterInstanceCount {
            get {
                int count = 0;
                if ((this._strategyParametersPerformanceTableAdapter != null)) {
                    count = (count + 1);
                }
                return count;
            }
        }
        
        /// <summary>
        ///Update rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private int UpdateUpdatedRows(EFundDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._strategyParametersPerformanceTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.StrategyParametersPerformance.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._strategyParametersPerformanceTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Insert rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private int UpdateInsertedRows(EFundDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._strategyParametersPerformanceTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.StrategyParametersPerformance.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._strategyParametersPerformanceTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Delete rows in bottom-up order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private int UpdateDeletedRows(EFundDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows) {
            int result = 0;
            if ((this._strategyParametersPerformanceTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.StrategyParametersPerformance.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._strategyParametersPerformanceTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private global::System.Data.DataRow[] GetRealUpdatedRows(global::System.Data.DataRow[] updatedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            if (((updatedRows == null) 
                        || (updatedRows.Length < 1))) {
                return updatedRows;
            }
            if (((allAddedRows == null) 
                        || (allAddedRows.Count < 1))) {
                return updatedRows;
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> realUpdatedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            for (int i = 0; (i < updatedRows.Length); i = (i + 1)) {
                global::System.Data.DataRow row = updatedRows[i];
                if ((allAddedRows.Contains(row) == false)) {
                    realUpdatedRows.Add(row);
                }
            }
            return realUpdatedRows.ToArray();
        }
        
        /// <summary>
        ///Update all changes to the dataset.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public virtual int UpdateAll(EFundDataSet dataSet) {
            if ((dataSet == null)) {
                throw new global::System.ArgumentNullException("dataSet");
            }
            if ((dataSet.HasChanges() == false)) {
                return 0;
            }
            if (((this._strategyParametersPerformanceTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._strategyParametersPerformanceTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            global::System.Data.IDbConnection workConnection = this.Connection;
            if ((workConnection == null)) {
                throw new global::System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana" +
                        "ger TableAdapter property to a valid TableAdapter instance.");
            }
            bool workConnOpened = false;
            if (((workConnection.State & global::System.Data.ConnectionState.Broken) 
                        == global::System.Data.ConnectionState.Broken)) {
                workConnection.Close();
            }
            if ((workConnection.State == global::System.Data.ConnectionState.Closed)) {
                workConnection.Open();
                workConnOpened = true;
            }
            global::System.Data.IDbTransaction workTransaction = workConnection.BeginTransaction();
            if ((workTransaction == null)) {
                throw new global::System.ApplicationException("The transaction cannot begin. The current data connection does not support transa" +
                        "ctions or the current state is not allowing the transaction to begin.");
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter> adaptersWithAcceptChangesDuringUpdate = new global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter>();
            global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection> revertConnections = new global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection>();
            int result = 0;
            global::System.Data.DataSet backupDataSet = null;
            if (this.BackupDataSetBeforeUpdate) {
                backupDataSet = new global::System.Data.DataSet();
                backupDataSet.Merge(dataSet);
            }
            try {
                // ---- Prepare for update -----------
                //
                if ((this._strategyParametersPerformanceTableAdapter != null)) {
                    revertConnections.Add(this._strategyParametersPerformanceTableAdapter, this._strategyParametersPerformanceTableAdapter.Connection);
                    this._strategyParametersPerformanceTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._strategyParametersPerformanceTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._strategyParametersPerformanceTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._strategyParametersPerformanceTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._strategyParametersPerformanceTableAdapter.Adapter);
                    }
                }
                // 
                //---- Perform updates -----------
                //
                if ((this.UpdateOrder == UpdateOrderOption.UpdateInsertDelete)) {
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                }
                else {
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                }
                result = (result + this.UpdateDeletedRows(dataSet, allChangedRows));
                // 
                //---- Commit updates -----------
                //
                workTransaction.Commit();
                if ((0 < allAddedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                    allAddedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
                if ((0 < allChangedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allChangedRows.Count];
                    allChangedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
            }
            catch (global::System.Exception ex) {
                workTransaction.Rollback();
                // ---- Restore the dataset -----------
                if (this.BackupDataSetBeforeUpdate) {
                    global::System.Diagnostics.Debug.Assert((backupDataSet != null));
                    dataSet.Clear();
                    dataSet.Merge(backupDataSet);
                }
                else {
                    if ((0 < allAddedRows.Count)) {
                        global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        for (int i = 0; (i < rows.Length); i = (i + 1)) {
                            global::System.Data.DataRow row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                        }
                    }
                }
                throw ex;
            }
            finally {
                if (workConnOpened) {
                    workConnection.Close();
                }
                if ((this._strategyParametersPerformanceTableAdapter != null)) {
                    this._strategyParametersPerformanceTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._strategyParametersPerformanceTableAdapter]));
                    this._strategyParametersPerformanceTableAdapter.Transaction = null;
                }
                if ((0 < adaptersWithAcceptChangesDuringUpdate.Count)) {
                    global::System.Data.Common.DataAdapter[] adapters = new System.Data.Common.DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                    for (int i = 0; (i < adapters.Length); i = (i + 1)) {
                        global::System.Data.Common.DataAdapter adapter = adapters[i];
                        adapter.AcceptChangesDuringUpdate = true;
                    }
                }
            }
            return result;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected virtual void SortSelfReferenceRows(global::System.Data.DataRow[] rows, global::System.Data.DataRelation relation, bool childFirst) {
            global::System.Array.Sort<global::System.Data.DataRow>(rows, new SelfReferenceComparer(relation, childFirst));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected virtual bool MatchTableAdapterConnection(global::System.Data.IDbConnection inputConnection) {
            if ((this._connection != null)) {
                return true;
            }
            if (((this.Connection == null) 
                        || (inputConnection == null))) {
                return true;
            }
            if (string.Equals(this.Connection.ConnectionString, inputConnection.ConnectionString, global::System.StringComparison.Ordinal)) {
                return true;
            }
            return false;
        }
        
        /// <summary>
        ///Update Order Option
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public enum UpdateOrderOption {
            
            InsertUpdateDelete = 0,
            
            UpdateInsertDelete = 1,
        }
        
        /// <summary>
        ///Used to sort self-referenced table's rows
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private class SelfReferenceComparer : object, global::System.Collections.Generic.IComparer<global::System.Data.DataRow> {
            
            private global::System.Data.DataRelation _relation;
            
            private int _childFirst;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal SelfReferenceComparer(global::System.Data.DataRelation relation, bool childFirst) {
                this._relation = relation;
                if (childFirst) {
                    this._childFirst = -1;
                }
                else {
                    this._childFirst = 1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private global::System.Data.DataRow GetRoot(global::System.Data.DataRow row, out int distance) {
                global::System.Diagnostics.Debug.Assert((row != null));
                global::System.Data.DataRow root = row;
                distance = 0;

                global::System.Collections.Generic.IDictionary<global::System.Data.DataRow, global::System.Data.DataRow> traversedRows = new global::System.Collections.Generic.Dictionary<global::System.Data.DataRow, global::System.Data.DataRow>();
                traversedRows[row] = row;

                global::System.Data.DataRow parent = row.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                for (
                ; ((parent != null) 
                            && (traversedRows.ContainsKey(parent) == false)); 
                ) {
                    distance = (distance + 1);
                    root = parent;
                    traversedRows[parent] = parent;
                    parent = parent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                }

                if ((distance == 0)) {
                    traversedRows.Clear();
                    traversedRows[row] = row;
                    parent = row.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    for (
                    ; ((parent != null) 
                                && (traversedRows.ContainsKey(parent) == false)); 
                    ) {
                        distance = (distance + 1);
                        root = parent;
                        traversedRows[parent] = parent;
                        parent = parent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    }
                }

                return root;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Compare(global::System.Data.DataRow row1, global::System.Data.DataRow row2) {
                if (object.ReferenceEquals(row1, row2)) {
                    return 0;
                }
                if ((row1 == null)) {
                    return -1;
                }
                if ((row2 == null)) {
                    return 1;
                }

                int distance1 = 0;
                global::System.Data.DataRow root1 = this.GetRoot(row1, out distance1);

                int distance2 = 0;
                global::System.Data.DataRow root2 = this.GetRoot(row2, out distance2);

                if (object.ReferenceEquals(root1, root2)) {
                    return (this._childFirst * distance1.CompareTo(distance2));
                }
                else {
                    global::System.Diagnostics.Debug.Assert(((root1.Table != null) 
                                    && (root2.Table != null)));
                    if ((root1.Table.Rows.IndexOf(root1) < root2.Table.Rows.IndexOf(root2))) {
                        return -1;
                    }
                    else {
                        return 1;
                    }
                }
            }
        }
    }
}

#pragma warning restore 1591